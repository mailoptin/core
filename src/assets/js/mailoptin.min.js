(function ($, require$$0, mailoptin_globals) {
	'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var $__default = /*#__PURE__*/_interopDefaultLegacy($);
	var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);
	var mailoptin_globals__default = /*#__PURE__*/_interopDefaultLegacy(mailoptin_globals);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	var js_cookie = {exports: {}};

	/*
	 * JavaScript Cookie v2.2.1
	 * https://github.com/js-cookie/js-cookie
	 *
	 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
	 * Released under the MIT license
	 */

	(function (module, exports) {
	(function (factory) {
	    var registeredInModuleLoader;
	    {
	        module.exports = factory();
	        registeredInModuleLoader = true;
	    }
	    if (!registeredInModuleLoader) {
	        var OldCookies = window.Cookies;
	        var api = window.Cookies = factory();
	        api.noConflict = function () {
	            window.Cookies = OldCookies;
	            return api;
	        };
	    }
	}(function () {
	    function extend () {
	        var i = 0;
	        var result = {};
	        for (; i < arguments.length; i++) {
	            var attributes = arguments[ i ];
	            for (var key in attributes) {
	                result[key] = attributes[key];
	            }
	        }
	        return result;
	    }

	    function decode (s) {
	        return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	    }

	    function init (converter) {
	        function api() {}

	        function set (key, value, attributes) {
	            if (typeof document === 'undefined') {
	                return;
	            }

	            attributes = extend({
	                path: '/'
	            }, api.defaults, attributes);

	            if (typeof attributes.expires === 'number') {
	                attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
	            }

	            // We're using "expires" because "max-age" is not supported by IE
	            attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

	            try {
	                var result = JSON.stringify(value);
	                if (/^[\{\[]/.test(result)) {
	                    value = result;
	                }
	            } catch (e) {}

	            value = converter.write ?
	                converter.write(value, key) :
	                encodeURIComponent(String(value))
	                    .replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

	            key = encodeURIComponent(String(key))
	                .replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
	                .replace(/[\(\)]/g, escape);

	            var stringifiedAttributes = '';
	            for (var attributeName in attributes) {
	                if (!attributes[attributeName]) {
	                    continue;
	                }
	                stringifiedAttributes += '; ' + attributeName;
	                if (attributes[attributeName] === true) {
	                    continue;
	                }

	                // Considers RFC 6265 section 5.2:
	                // ...
	                // 3.  If the remaining unparsed-attributes contains a %x3B (";")
	                //     character:
	                // Consume the characters of the unparsed-attributes up to,
	                // not including, the first %x3B (";") character.
	                // ...
	                stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
	            }

	            return (document.cookie = key + '=' + value + stringifiedAttributes);
	        }

	        function get (key, json) {
	            if (typeof document === 'undefined') {
	                return;
	            }

	            var jar = {};
	            // To prevent the for loop in the first place assign an empty array
	            // in case there are no cookies at all.
	            var cookies = document.cookie ? document.cookie.split('; ') : [];
	            var i = 0;

	            for (; i < cookies.length; i++) {
	                var parts = cookies[i].split('=');
	                var cookie = parts.slice(1).join('=');

	                if (!json && cookie.charAt(0) === '"') {
	                    cookie = cookie.slice(1, -1);
	                }

	                try {
	                    var name = decode(parts[0]);
	                    cookie = (converter.read || converter)(cookie, name) ||
	                        decode(cookie);

	                    if (json) {
	                        try {
	                            cookie = JSON.parse(cookie);
	                        } catch (e) {}
	                    }

	                    jar[name] = cookie;

	                    if (key === name) {
	                        break;
	                    }
	                } catch (e) {}
	            }

	            return key ? jar[key] : jar;
	        }

	        api.set = set;
	        api.get = function (key) {
	            return get(key, false /* read as raw */);
	        };
	        api.getJSON = function (key) {
	            return get(key, true /* read as json */);
	        };
	        api.remove = function (key, attributes) {
	            set(key, '', extend(attributes, {
	                expires: -1
	            }));
	        };

	        api.defaults = {};

	        api.withConverter = init;

	        return api;
	    }

	    return init(function () {});
	}));
	}(js_cookie));

	var Cookies = js_cookie.exports;

	var pikaday = {exports: {}};

	/*
	 * Pikaday
	 *
	 * Copyright Â© 2014 David Bushell | BSD & MIT license | https://github.com/Pikaday/Pikaday
	 */

	(function (module, exports) {
	(function (root, factory)
	{

	    var moment;
	    {
	        // CommonJS module
	        // Load moment.js as an optional dependency
	        try { moment = require$$0__default['default']; } catch (e) {}
	        module.exports = factory(moment);
	    }
	}(commonjsGlobal, function (moment)
	{

	    /**
	     * feature detection and helper functions
	     */
	    var hasMoment = typeof moment === 'function',

	        hasEventListeners = !!window.addEventListener,

	        document = window.document,

	        sto = window.setTimeout,

	        addEvent = function(el, e, callback, capture)
	        {
	            if (hasEventListeners) {
	                el.addEventListener(e, callback, !!capture);
	            } else {
	                el.attachEvent('on' + e, callback);
	            }
	        },

	        removeEvent = function(el, e, callback, capture)
	        {
	            if (hasEventListeners) {
	                el.removeEventListener(e, callback, !!capture);
	            } else {
	                el.detachEvent('on' + e, callback);
	            }
	        },

	        trim = function(str)
	        {
	            return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g,'');
	        },

	        hasClass = function(el, cn)
	        {
	            return (' ' + el.className + ' ').indexOf(' ' + cn + ' ') !== -1;
	        },

	        addClass = function(el, cn)
	        {
	            if (!hasClass(el, cn)) {
	                el.className = (el.className === '') ? cn : el.className + ' ' + cn;
	            }
	        },

	        removeClass = function(el, cn)
	        {
	            el.className = trim((' ' + el.className + ' ').replace(' ' + cn + ' ', ' '));
	        },

	        isArray = function(obj)
	        {
	            return (/Array/).test(Object.prototype.toString.call(obj));
	        },

	        isDate = function(obj)
	        {
	            return (/Date/).test(Object.prototype.toString.call(obj)) && !isNaN(obj.getTime());
	        },

	        isWeekend = function(date)
	        {
	            var day = date.getDay();
	            return day === 0 || day === 6;
	        },

	        isLeapYear = function(year)
	        {
	            // solution lifted from date.js (MIT license): https://github.com/datejs/Datejs
	            return ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
	        },

	        getDaysInMonth = function(year, month)
	        {
	            return [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
	        },

	        setToStartOfDay = function(date)
	        {
	            if (isDate(date)) date.setHours(0,0,0,0);
	        },

	        compareDates = function(a,b)
	        {
	            // weak date comparison (use setToStartOfDay(date) to ensure correct result)
	            return a.getTime() === b.getTime();
	        },

	        extend = function(to, from, overwrite)
	        {
	            var prop, hasProp;
	            for (prop in from) {
	                hasProp = to[prop] !== undefined;
	                if (hasProp && typeof from[prop] === 'object' && from[prop] !== null && from[prop].nodeName === undefined) {
	                    if (isDate(from[prop])) {
	                        if (overwrite) {
	                            to[prop] = new Date(from[prop].getTime());
	                        }
	                    }
	                    else if (isArray(from[prop])) {
	                        if (overwrite) {
	                            to[prop] = from[prop].slice(0);
	                        }
	                    } else {
	                        to[prop] = extend({}, from[prop], overwrite);
	                    }
	                } else if (overwrite || !hasProp) {
	                    to[prop] = from[prop];
	                }
	            }
	            return to;
	        },

	        fireEvent = function(el, eventName, data)
	        {
	            var ev;

	            if (document.createEvent) {
	                ev = document.createEvent('HTMLEvents');
	                ev.initEvent(eventName, true, false);
	                ev = extend(ev, data);
	                el.dispatchEvent(ev);
	            } else if (document.createEventObject) {
	                ev = document.createEventObject();
	                ev = extend(ev, data);
	                el.fireEvent('on' + eventName, ev);
	            }
	        },

	        adjustCalendar = function(calendar) {
	            if (calendar.month < 0) {
	                calendar.year -= Math.ceil(Math.abs(calendar.month)/12);
	                calendar.month += 12;
	            }
	            if (calendar.month > 11) {
	                calendar.year += Math.floor(Math.abs(calendar.month)/12);
	                calendar.month -= 12;
	            }
	            return calendar;
	        },

	        /**
	         * defaults and localisation
	         */
	        defaults = {

	            // bind the picker to a form field
	            field: null,

	            // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
	            bound: undefined,

	            // data-attribute on the input field with an aria assistance text (only applied when `bound` is set)
	            ariaLabel: 'Use the arrow keys to pick a date',

	            // position of the datepicker, relative to the field (default to bottom & left)
	            // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
	            position: 'bottom left',

	            // automatically fit in the viewport even if it means repositioning from the position option
	            reposition: true,

	            // the default output format for `.toString()` and `field` value
	            format: 'YYYY-MM-DD',

	            // the toString function which gets passed a current date object and format
	            // and returns a string
	            toString: null,

	            // used to create date object from current input string
	            parse: null,

	            // the initial date to view when first opened
	            defaultDate: null,

	            // make the `defaultDate` the initial selected value
	            setDefaultDate: false,

	            // first day of week (0: Sunday, 1: Monday etc)
	            firstDay: 0,

	            // minimum number of days in the week that gets week number one
	            // default ISO 8601, week 01 is the week with the first Thursday (4)
	            firstWeekOfYearMinDays: 4,

	            // the default flag for moment's strict date parsing
	            formatStrict: false,

	            // the minimum/earliest date that can be selected
	            minDate: null,
	            // the maximum/latest date that can be selected
	            maxDate: null,

	            // number of years either side, or array of upper/lower range
	            yearRange: 10,

	            // show week numbers at head of row
	            showWeekNumber: false,

	            // Week picker mode
	            pickWholeWeek: false,

	            // used internally (don't config outside)
	            minYear: 0,
	            maxYear: 9999,
	            minMonth: undefined,
	            maxMonth: undefined,

	            startRange: null,
	            endRange: null,

	            isRTL: false,

	            // Additional text to append to the year in the calendar title
	            yearSuffix: '',

	            // Render the month after year in the calendar title
	            showMonthAfterYear: false,

	            // Render days of the calendar grid that fall in the next or previous month
	            showDaysInNextAndPreviousMonths: false,

	            // Allows user to select days that fall in the next or previous month
	            enableSelectionDaysInNextAndPreviousMonths: false,

	            // how many months are visible
	            numberOfMonths: 1,

	            // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
	            // only used for the first display or when a selected date is not visible
	            mainCalendar: 'left',

	            // Specify a DOM element to render the calendar in
	            container: undefined,

	            // Blur field when date is selected
	            blurFieldOnSelect : true,

	            // internationalization
	            i18n: {
	                previousMonth : 'Previous Month',
	                nextMonth     : 'Next Month',
	                months        : ['January','February','March','April','May','June','July','August','September','October','November','December'],
	                weekdays      : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
	                weekdaysShort : ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
	            },

	            // Theme Classname
	            theme: null,

	            // events array
	            events: [],

	            // callback function
	            onSelect: null,
	            onOpen: null,
	            onClose: null,
	            onDraw: null,

	            // Enable keyboard input
	            keyboardInput: true
	        },


	        /**
	         * templating functions to abstract HTML rendering
	         */
	        renderDayName = function(opts, day, abbr)
	        {
	            day += opts.firstDay;
	            while (day >= 7) {
	                day -= 7;
	            }
	            return abbr ? opts.i18n.weekdaysShort[day] : opts.i18n.weekdays[day];
	        },

	        renderDay = function(opts)
	        {
	            var arr = [];
	            var ariaSelected = 'false';
	            if (opts.isEmpty) {
	                if (opts.showDaysInNextAndPreviousMonths) {
	                    arr.push('is-outside-current-month');

	                    if(!opts.enableSelectionDaysInNextAndPreviousMonths) {
	                        arr.push('is-selection-disabled');
	                    }

	                } else {
	                    return '<td class="is-empty"></td>';
	                }
	            }
	            if (opts.isDisabled) {
	                arr.push('is-disabled');
	            }
	            if (opts.isToday) {
	                arr.push('is-today');
	            }
	            if (opts.isSelected) {
	                arr.push('is-selected');
	                ariaSelected = 'true';
	            }
	            if (opts.hasEvent) {
	                arr.push('has-event');
	            }
	            if (opts.isInRange) {
	                arr.push('is-inrange');
	            }
	            if (opts.isStartRange) {
	                arr.push('is-startrange');
	            }
	            if (opts.isEndRange) {
	                arr.push('is-endrange');
	            }
	            return '<td data-day="' + opts.day + '" class="' + arr.join(' ') + '" aria-selected="' + ariaSelected + '">' +
	                '<button class="pika-button pika-day" type="button" ' +
	                'data-pika-year="' + opts.year + '" data-pika-month="' + opts.month + '" data-pika-day="' + opts.day + '">' +
	                opts.day +
	                '</button>' +
	                '</td>';
	        },

	        isoWeek = function(date, firstWeekOfYearMinDays) {
	            // Ensure we're at the start of the day.
	            date.setHours(0, 0, 0, 0);

	            // Thursday in current week decides the year because January 4th
	            // is always in the first week according to ISO8601.
	            var yearDay        = date.getDate(),
	                weekDay        = date.getDay(),
	                dayInFirstWeek = firstWeekOfYearMinDays,
	                dayShift       = dayInFirstWeek - 1, // counting starts at 0
	                daysPerWeek    = 7,
	                prevWeekDay    = function(day) { return (day + daysPerWeek - 1) % daysPerWeek; };

	            // Adjust to Thursday in week 1 and count number of weeks from date to week 1.
	            date.setDate(yearDay + dayShift - prevWeekDay(weekDay));

	            var jan4th      = new Date(date.getFullYear(), 0, dayInFirstWeek),
	                msPerDay    = 24 * 60 * 60 * 1000,
	                daysBetween = (date.getTime() - jan4th.getTime()) / msPerDay,
	                weekNum     = 1 + Math.round((daysBetween - dayShift + prevWeekDay(jan4th.getDay())) / daysPerWeek);

	            return weekNum;
	        },

	        renderWeek = function (d, m, y, firstWeekOfYearMinDays) {
	            var date = new Date(y, m, d),
	                week = hasMoment ? moment(date).isoWeek() : isoWeek(date, firstWeekOfYearMinDays);

	            return '<td class="pika-week">' + week + '</td>';
	        },

	        renderRow = function(days, isRTL, pickWholeWeek, isRowSelected)
	        {
	            return '<tr class="pika-row' + (pickWholeWeek ? ' pick-whole-week' : '') + (isRowSelected ? ' is-selected' : '') + '">' + (isRTL ? days.reverse() : days).join('') + '</tr>';
	        },

	        renderBody = function(rows)
	        {
	            return '<tbody>' + rows.join('') + '</tbody>';
	        },

	        renderHead = function(opts)
	        {
	            var i, arr = [];
	            if (opts.showWeekNumber) {
	                arr.push('<th></th>');
	            }
	            for (i = 0; i < 7; i++) {
	                arr.push('<th scope="col"><abbr title="' + renderDayName(opts, i) + '">' + renderDayName(opts, i, true) + '</abbr></th>');
	            }
	            return '<thead><tr>' + (opts.isRTL ? arr.reverse() : arr).join('') + '</tr></thead>';
	        },

	        renderTitle = function(instance, c, year, month, refYear, randId)
	        {
	            var i, j, arr,
	                opts = instance._o,
	                isMinYear = year === opts.minYear,
	                isMaxYear = year === opts.maxYear,
	                html = '<div id="' + randId + '" class="pika-title" role="heading" aria-live="assertive">',
	                monthHtml,
	                yearHtml,
	                prev = true,
	                next = true;

	            for (arr = [], i = 0; i < 12; i++) {
	                arr.push('<option value="' + (year === refYear ? i - c : 12 + i - c) + '"' +
	                    (i === month ? ' selected="selected"': '') +
	                    ((isMinYear && i < opts.minMonth) || (isMaxYear && i > opts.maxMonth) ? ' disabled="disabled"' : '') + '>' +
	                    opts.i18n.months[i] + '</option>');
	            }

	            monthHtml = '<div class="pika-label">' + opts.i18n.months[month] + '<select class="pika-select pika-select-month" tabindex="-1">' + arr.join('') + '</select></div>';

	            if (isArray(opts.yearRange)) {
	                i = opts.yearRange[0];
	                j = opts.yearRange[1] + 1;
	            } else {
	                i = year - opts.yearRange;
	                j = 1 + year + opts.yearRange;
	            }

	            for (arr = []; i < j && i <= opts.maxYear; i++) {
	                if (i >= opts.minYear) {
	                    arr.push('<option value="' + i + '"' + (i === year ? ' selected="selected"': '') + '>' + (i) + '</option>');
	                }
	            }
	            yearHtml = '<div class="pika-label">' + year + opts.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + arr.join('') + '</select></div>';

	            if (opts.showMonthAfterYear) {
	                html += yearHtml + monthHtml;
	            } else {
	                html += monthHtml + yearHtml;
	            }

	            if (isMinYear && (month === 0 || opts.minMonth >= month)) {
	                prev = false;
	            }

	            if (isMaxYear && (month === 11 || opts.maxMonth <= month)) {
	                next = false;
	            }

	            if (c === 0) {
	                html += '<button class="pika-prev' + (prev ? '' : ' is-disabled') + '" type="button">' + opts.i18n.previousMonth + '</button>';
	            }
	            if (c === (instance._o.numberOfMonths - 1) ) {
	                html += '<button class="pika-next' + (next ? '' : ' is-disabled') + '" type="button">' + opts.i18n.nextMonth + '</button>';
	            }

	            return html += '</div>';
	        },

	        renderTable = function(opts, data, randId)
	        {
	            return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + randId + '">' + renderHead(opts) + renderBody(data) + '</table>';
	        },


	        /**
	         * Pikaday constructor
	         */
	        Pikaday = function(options)
	        {
	            var self = this,
	                opts = self.config(options);

	            self._onMouseDown = function(e)
	            {
	                if (!self._v) {
	                    return;
	                }
	                e = e || window.event;
	                var target = e.target || e.srcElement;
	                if (!target) {
	                    return;
	                }

	                if (!hasClass(target, 'is-disabled')) {
	                    if (hasClass(target, 'pika-button') && !hasClass(target, 'is-empty') && !hasClass(target.parentNode, 'is-disabled')) {
	                        self.setDate(new Date(target.getAttribute('data-pika-year'), target.getAttribute('data-pika-month'), target.getAttribute('data-pika-day')));
	                        if (opts.bound) {
	                            sto(function() {
	                                self.hide();
	                                if (opts.blurFieldOnSelect && opts.field) {
	                                    opts.field.blur();
	                                }
	                            }, 100);
	                        }
	                    }
	                    else if (hasClass(target, 'pika-prev')) {
	                        self.prevMonth();
	                    }
	                    else if (hasClass(target, 'pika-next')) {
	                        self.nextMonth();
	                    }
	                }
	                if (!hasClass(target, 'pika-select')) {
	                    // if this is touch event prevent mouse events emulation
	                    if (e.preventDefault) {
	                        e.preventDefault();
	                    } else {
	                        e.returnValue = false;
	                        return false;
	                    }
	                } else {
	                    self._c = true;
	                }
	            };

	            self._onChange = function(e)
	            {
	                e = e || window.event;
	                var target = e.target || e.srcElement;
	                if (!target) {
	                    return;
	                }
	                if (hasClass(target, 'pika-select-month')) {
	                    self.gotoMonth(target.value);
	                }
	                else if (hasClass(target, 'pika-select-year')) {
	                    self.gotoYear(target.value);
	                }
	            };

	            self._onKeyChange = function(e)
	            {
	                e = e || window.event;

	                if (self.isVisible()) {

	                    switch(e.keyCode){
	                        case 13:
	                        case 27:
	                            if (opts.field) {
	                                opts.field.blur();
	                            }
	                            break;
	                        case 37:
	                            self.adjustDate('subtract', 1);
	                            break;
	                        case 38:
	                            self.adjustDate('subtract', 7);
	                            break;
	                        case 39:
	                            self.adjustDate('add', 1);
	                            break;
	                        case 40:
	                            self.adjustDate('add', 7);
	                            break;
	                        case 8:
	                        case 46:
	                            self.setDate(null);
	                            break;
	                    }
	                }
	            };

	            self._parseFieldValue = function()
	            {
	                if (opts.parse) {
	                    return opts.parse(opts.field.value, opts.format);
	                } else if (hasMoment) {
	                    var date = moment(opts.field.value, opts.format, opts.formatStrict);
	                    return (date && date.isValid()) ? date.toDate() : null;
	                } else {
	                    return new Date(Date.parse(opts.field.value));
	                }
	            };

	            self._onInputChange = function(e)
	            {
	                var date;

	                if (e.firedBy === self) {
	                    return;
	                }
	                date = self._parseFieldValue();
	                if (isDate(date)) {
	                    self.setDate(date);
	                }
	                if (!self._v) {
	                    self.show();
	                }
	            };

	            self._onInputFocus = function()
	            {
	                self.show();
	            };

	            self._onInputClick = function()
	            {
	                self.show();
	            };

	            self._onInputBlur = function()
	            {
	                // IE allows pika div to gain focus; catch blur the input field
	                var pEl = document.activeElement;
	                do {
	                    if (hasClass(pEl, 'pika-single')) {
	                        return;
	                    }
	                }
	                while ((pEl = pEl.parentNode));

	                if (!self._c) {
	                    self._b = sto(function() {
	                        self.hide();
	                    }, 50);
	                }
	                self._c = false;
	            };

	            self._onClick = function(e)
	            {
	                e = e || window.event;
	                var target = e.target || e.srcElement,
	                    pEl = target;
	                if (!target) {
	                    return;
	                }
	                if (!hasEventListeners && hasClass(target, 'pika-select')) {
	                    if (!target.onchange) {
	                        target.setAttribute('onchange', 'return;');
	                        addEvent(target, 'change', self._onChange);
	                    }
	                }
	                do {
	                    if (hasClass(pEl, 'pika-single') || pEl === opts.trigger) {
	                        return;
	                    }
	                }
	                while ((pEl = pEl.parentNode));
	                if (self._v && target !== opts.trigger && pEl !== opts.trigger) {
	                    self.hide();
	                }
	            };

	            self.el = document.createElement('div');
	            self.el.className = 'pika-single' + (opts.isRTL ? ' is-rtl' : '') + (opts.theme ? ' ' + opts.theme : '');

	            addEvent(self.el, 'mousedown', self._onMouseDown, true);
	            addEvent(self.el, 'touchend', self._onMouseDown, true);
	            addEvent(self.el, 'change', self._onChange);

	            if (opts.keyboardInput) {
	                addEvent(document, 'keydown', self._onKeyChange);
	            }

	            if (opts.field) {
	                if (opts.container) {
	                    opts.container.appendChild(self.el);
	                } else if (opts.bound) {
	                    document.body.appendChild(self.el);
	                } else {
	                    opts.field.parentNode.insertBefore(self.el, opts.field.nextSibling);
	                }
	                addEvent(opts.field, 'change', self._onInputChange);

	                if (!opts.defaultDate) {
	                    opts.defaultDate = self._parseFieldValue();
	                    opts.setDefaultDate = true;
	                }
	            }

	            var defDate = opts.defaultDate;

	            if (isDate(defDate)) {
	                if (opts.setDefaultDate) {
	                    self.setDate(defDate, true);
	                } else {
	                    self.gotoDate(defDate);
	                }
	            } else {
	                self.gotoDate(new Date());
	            }

	            if (opts.bound) {
	                this.hide();
	                self.el.className += ' is-bound';
	                addEvent(opts.trigger, 'click', self._onInputClick);
	                addEvent(opts.trigger, 'focus', self._onInputFocus);
	                addEvent(opts.trigger, 'blur', self._onInputBlur);
	            } else {
	                this.show();
	            }
	        };


	    /**
	     * public Pikaday API
	     */
	    Pikaday.prototype = {


	        /**
	         * configure functionality
	         */
	        config: function(options)
	        {
	            if (!this._o) {
	                this._o = extend({}, defaults, true);
	            }

	            var opts = extend(this._o, options, true);

	            opts.isRTL = !!opts.isRTL;

	            opts.field = (opts.field && opts.field.nodeName) ? opts.field : null;

	            opts.theme = (typeof opts.theme) === 'string' && opts.theme ? opts.theme : null;

	            opts.bound = !!(opts.bound !== undefined ? opts.field && opts.bound : opts.field);

	            opts.trigger = (opts.trigger && opts.trigger.nodeName) ? opts.trigger : opts.field;

	            opts.disableWeekends = !!opts.disableWeekends;

	            opts.disableDayFn = (typeof opts.disableDayFn) === 'function' ? opts.disableDayFn : null;

	            var nom = parseInt(opts.numberOfMonths, 10) || 1;
	            opts.numberOfMonths = nom > 4 ? 4 : nom;

	            if (!isDate(opts.minDate)) {
	                opts.minDate = false;
	            }
	            if (!isDate(opts.maxDate)) {
	                opts.maxDate = false;
	            }
	            if ((opts.minDate && opts.maxDate) && opts.maxDate < opts.minDate) {
	                opts.maxDate = opts.minDate = false;
	            }
	            if (opts.minDate) {
	                this.setMinDate(opts.minDate);
	            }
	            if (opts.maxDate) {
	                this.setMaxDate(opts.maxDate);
	            }

	            if (isArray(opts.yearRange)) {
	                var fallback = new Date().getFullYear() - 10;
	                opts.yearRange[0] = parseInt(opts.yearRange[0], 10) || fallback;
	                opts.yearRange[1] = parseInt(opts.yearRange[1], 10) || fallback;
	            } else {
	                opts.yearRange = Math.abs(parseInt(opts.yearRange, 10)) || defaults.yearRange;
	                if (opts.yearRange > 100) {
	                    opts.yearRange = 100;
	                }
	            }

	            return opts;
	        },

	        /**
	         * return a formatted string of the current selection (using Moment.js if available)
	         */
	        toString: function(format)
	        {
	            format = format || this._o.format;
	            if (!isDate(this._d)) {
	                return '';
	            }
	            if (this._o.toString) {
	                return this._o.toString(this._d, format);
	            }
	            if (hasMoment) {
	                return moment(this._d).format(format);
	            }
	            return this._d.toDateString();
	        },

	        /**
	         * return a Moment.js object of the current selection (if available)
	         */
	        getMoment: function()
	        {
	            return hasMoment ? moment(this._d) : null;
	        },

	        /**
	         * set the current selection from a Moment.js object (if available)
	         */
	        setMoment: function(date, preventOnSelect)
	        {
	            if (hasMoment && moment.isMoment(date)) {
	                this.setDate(date.toDate(), preventOnSelect);
	            }
	        },

	        /**
	         * return a Date object of the current selection
	         */
	        getDate: function()
	        {
	            return isDate(this._d) ? new Date(this._d.getTime()) : null;
	        },

	        /**
	         * set the current selection
	         */
	        setDate: function(date, preventOnSelect)
	        {
	            if (!date) {
	                this._d = null;

	                if (this._o.field) {
	                    this._o.field.value = '';
	                    fireEvent(this._o.field, 'change', { firedBy: this });
	                }

	                return this.draw();
	            }
	            if (typeof date === 'string') {
	                date = new Date(Date.parse(date));
	            }
	            if (!isDate(date)) {
	                return;
	            }

	            var min = this._o.minDate,
	                max = this._o.maxDate;

	            if (isDate(min) && date < min) {
	                date = min;
	            } else if (isDate(max) && date > max) {
	                date = max;
	            }

	            this._d = new Date(date.getTime());
	            setToStartOfDay(this._d);
	            this.gotoDate(this._d);

	            if (this._o.field) {
	                this._o.field.value = this.toString();
	                fireEvent(this._o.field, 'change', { firedBy: this });
	            }
	            if (!preventOnSelect && typeof this._o.onSelect === 'function') {
	                this._o.onSelect.call(this, this.getDate());
	            }
	        },

	        /**
	         * clear and reset the date
	         */
	        clear: function()
	        {
	            this.setDate(null);
	        },

	        /**
	         * change view to a specific date
	         */
	        gotoDate: function(date)
	        {
	            var newCalendar = true;

	            if (!isDate(date)) {
	                return;
	            }

	            if (this.calendars) {
	                var firstVisibleDate = new Date(this.calendars[0].year, this.calendars[0].month, 1),
	                    lastVisibleDate = new Date(this.calendars[this.calendars.length-1].year, this.calendars[this.calendars.length-1].month, 1),
	                    visibleDate = date.getTime();
	                // get the end of the month
	                lastVisibleDate.setMonth(lastVisibleDate.getMonth()+1);
	                lastVisibleDate.setDate(lastVisibleDate.getDate()-1);
	                newCalendar = (visibleDate < firstVisibleDate.getTime() || lastVisibleDate.getTime() < visibleDate);
	            }

	            if (newCalendar) {
	                this.calendars = [{
	                    month: date.getMonth(),
	                    year: date.getFullYear()
	                }];
	                if (this._o.mainCalendar === 'right') {
	                    this.calendars[0].month += 1 - this._o.numberOfMonths;
	                }
	            }

	            this.adjustCalendars();
	        },

	        adjustDate: function(sign, days) {

	            var day = this.getDate() || new Date();
	            var difference = parseInt(days)*24*60*60*1000;

	            var newDay;

	            if (sign === 'add') {
	                newDay = new Date(day.valueOf() + difference);
	            } else if (sign === 'subtract') {
	                newDay = new Date(day.valueOf() - difference);
	            }

	            this.setDate(newDay);
	        },

	        adjustCalendars: function() {
	            this.calendars[0] = adjustCalendar(this.calendars[0]);
	            for (var c = 1; c < this._o.numberOfMonths; c++) {
	                this.calendars[c] = adjustCalendar({
	                    month: this.calendars[0].month + c,
	                    year: this.calendars[0].year
	                });
	            }
	            this.draw();
	        },

	        gotoToday: function()
	        {
	            this.gotoDate(new Date());
	        },

	        /**
	         * change view to a specific month (zero-index, e.g. 0: January)
	         */
	        gotoMonth: function(month)
	        {
	            if (!isNaN(month)) {
	                this.calendars[0].month = parseInt(month, 10);
	                this.adjustCalendars();
	            }
	        },

	        nextMonth: function()
	        {
	            this.calendars[0].month++;
	            this.adjustCalendars();
	        },

	        prevMonth: function()
	        {
	            this.calendars[0].month--;
	            this.adjustCalendars();
	        },

	        /**
	         * change view to a specific full year (e.g. "2012")
	         */
	        gotoYear: function(year)
	        {
	            if (!isNaN(year)) {
	                this.calendars[0].year = parseInt(year, 10);
	                this.adjustCalendars();
	            }
	        },

	        /**
	         * change the minDate
	         */
	        setMinDate: function(value)
	        {
	            if(value instanceof Date) {
	                setToStartOfDay(value);
	                this._o.minDate = value;
	                this._o.minYear  = value.getFullYear();
	                this._o.minMonth = value.getMonth();
	            } else {
	                this._o.minDate = defaults.minDate;
	                this._o.minYear  = defaults.minYear;
	                this._o.minMonth = defaults.minMonth;
	                this._o.startRange = defaults.startRange;
	            }

	            this.draw();
	        },

	        /**
	         * change the maxDate
	         */
	        setMaxDate: function(value)
	        {
	            if(value instanceof Date) {
	                setToStartOfDay(value);
	                this._o.maxDate = value;
	                this._o.maxYear = value.getFullYear();
	                this._o.maxMonth = value.getMonth();
	            } else {
	                this._o.maxDate = defaults.maxDate;
	                this._o.maxYear = defaults.maxYear;
	                this._o.maxMonth = defaults.maxMonth;
	                this._o.endRange = defaults.endRange;
	            }

	            this.draw();
	        },

	        setStartRange: function(value)
	        {
	            this._o.startRange = value;
	        },

	        setEndRange: function(value)
	        {
	            this._o.endRange = value;
	        },

	        /**
	         * refresh the HTML
	         */
	        draw: function(force)
	        {
	            if (!this._v && !force) {
	                return;
	            }
	            var opts = this._o,
	                minYear = opts.minYear,
	                maxYear = opts.maxYear,
	                minMonth = opts.minMonth,
	                maxMonth = opts.maxMonth,
	                html = '',
	                randId;

	            if (this._y <= minYear) {
	                this._y = minYear;
	                if (!isNaN(minMonth) && this._m < minMonth) {
	                    this._m = minMonth;
	                }
	            }
	            if (this._y >= maxYear) {
	                this._y = maxYear;
	                if (!isNaN(maxMonth) && this._m > maxMonth) {
	                    this._m = maxMonth;
	                }
	            }

	            for (var c = 0; c < opts.numberOfMonths; c++) {
	                randId = 'pika-title-' + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 2);
	                html += '<div class="pika-lendar">' + renderTitle(this, c, this.calendars[c].year, this.calendars[c].month, this.calendars[0].year, randId) + this.render(this.calendars[c].year, this.calendars[c].month, randId) + '</div>';
	            }

	            this.el.innerHTML = html;

	            if (opts.bound) {
	                if(opts.field.type !== 'hidden') {
	                    sto(function() {
	                        opts.trigger.focus();
	                    }, 1);
	                }
	            }

	            if (typeof this._o.onDraw === 'function') {
	                this._o.onDraw(this);
	            }

	            if (opts.bound) {
	                // let the screen reader user know to use arrow keys
	                opts.field.setAttribute('aria-label', opts.ariaLabel);
	            }
	        },

	        adjustPosition: function()
	        {
	            var field, pEl, width, height, viewportWidth, viewportHeight, scrollTop, left, top, clientRect, leftAligned, bottomAligned;

	            if (this._o.container) return;

	            this.el.style.position = 'absolute';

	            field = this._o.trigger;
	            pEl = field;
	            width = this.el.offsetWidth;
	            height = this.el.offsetHeight;
	            viewportWidth = window.innerWidth || document.documentElement.clientWidth;
	            viewportHeight = window.innerHeight || document.documentElement.clientHeight;
	            scrollTop = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
	            leftAligned = true;
	            bottomAligned = true;

	            if (typeof field.getBoundingClientRect === 'function') {
	                clientRect = field.getBoundingClientRect();
	                left = clientRect.left + window.pageXOffset;
	                top = clientRect.bottom + window.pageYOffset;
	            } else {
	                left = pEl.offsetLeft;
	                top  = pEl.offsetTop + pEl.offsetHeight;
	                while((pEl = pEl.offsetParent)) {
	                    left += pEl.offsetLeft;
	                    top  += pEl.offsetTop;
	                }
	            }

	            // default position is bottom & left
	            if ((this._o.reposition && left + width > viewportWidth) ||
	                (
	                    this._o.position.indexOf('right') > -1 &&
	                    left - width + field.offsetWidth > 0
	                )
	            ) {
	                left = left - width + field.offsetWidth;
	                leftAligned = false;
	            }
	            if ((this._o.reposition && top + height > viewportHeight + scrollTop) ||
	                (
	                    this._o.position.indexOf('top') > -1 &&
	                    top - height - field.offsetHeight > 0
	                )
	            ) {
	                top = top - height - field.offsetHeight;
	                bottomAligned = false;
	            }

	            this.el.style.left = left + 'px';
	            this.el.style.top = top + 'px';

	            addClass(this.el, leftAligned ? 'left-aligned' : 'right-aligned');
	            addClass(this.el, bottomAligned ? 'bottom-aligned' : 'top-aligned');
	            removeClass(this.el, !leftAligned ? 'left-aligned' : 'right-aligned');
	            removeClass(this.el, !bottomAligned ? 'bottom-aligned' : 'top-aligned');
	        },

	        /**
	         * render HTML for a particular month
	         */
	        render: function(year, month, randId)
	        {
	            var opts   = this._o,
	                now    = new Date(),
	                days   = getDaysInMonth(year, month),
	                before = new Date(year, month, 1).getDay(),
	                data   = [],
	                row    = [];
	            setToStartOfDay(now);
	            if (opts.firstDay > 0) {
	                before -= opts.firstDay;
	                if (before < 0) {
	                    before += 7;
	                }
	            }
	            var previousMonth = month === 0 ? 11 : month - 1,
	                nextMonth = month === 11 ? 0 : month + 1,
	                yearOfPreviousMonth = month === 0 ? year - 1 : year,
	                yearOfNextMonth = month === 11 ? year + 1 : year,
	                daysInPreviousMonth = getDaysInMonth(yearOfPreviousMonth, previousMonth);
	            var cells = days + before,
	                after = cells;
	            while(after > 7) {
	                after -= 7;
	            }
	            cells += 7 - after;
	            var isWeekSelected = false;
	            for (var i = 0, r = 0; i < cells; i++)
	            {
	                var day = new Date(year, month, 1 + (i - before)),
	                    isSelected = isDate(this._d) ? compareDates(day, this._d) : false,
	                    isToday = compareDates(day, now),
	                    hasEvent = opts.events.indexOf(day.toDateString()) !== -1 ? true : false,
	                    isEmpty = i < before || i >= (days + before),
	                    dayNumber = 1 + (i - before),
	                    monthNumber = month,
	                    yearNumber = year,
	                    isStartRange = opts.startRange && compareDates(opts.startRange, day),
	                    isEndRange = opts.endRange && compareDates(opts.endRange, day),
	                    isInRange = opts.startRange && opts.endRange && opts.startRange < day && day < opts.endRange,
	                    isDisabled = (opts.minDate && day < opts.minDate) ||
	                        (opts.maxDate && day > opts.maxDate) ||
	                        (opts.disableWeekends && isWeekend(day)) ||
	                        (opts.disableDayFn && opts.disableDayFn(day));

	                if (isEmpty) {
	                    if (i < before) {
	                        dayNumber = daysInPreviousMonth + dayNumber;
	                        monthNumber = previousMonth;
	                        yearNumber = yearOfPreviousMonth;
	                    } else {
	                        dayNumber = dayNumber - days;
	                        monthNumber = nextMonth;
	                        yearNumber = yearOfNextMonth;
	                    }
	                }

	                var dayConfig = {
	                    day: dayNumber,
	                    month: monthNumber,
	                    year: yearNumber,
	                    hasEvent: hasEvent,
	                    isSelected: isSelected,
	                    isToday: isToday,
	                    isDisabled: isDisabled,
	                    isEmpty: isEmpty,
	                    isStartRange: isStartRange,
	                    isEndRange: isEndRange,
	                    isInRange: isInRange,
	                    showDaysInNextAndPreviousMonths: opts.showDaysInNextAndPreviousMonths,
	                    enableSelectionDaysInNextAndPreviousMonths: opts.enableSelectionDaysInNextAndPreviousMonths
	                };

	                if (opts.pickWholeWeek && isSelected) {
	                    isWeekSelected = true;
	                }

	                row.push(renderDay(dayConfig));

	                if (++r === 7) {
	                    if (opts.showWeekNumber) {
	                        row.unshift(renderWeek(i - before, month, year, opts.firstWeekOfYearMinDays));
	                    }
	                    data.push(renderRow(row, opts.isRTL, opts.pickWholeWeek, isWeekSelected));
	                    row = [];
	                    r = 0;
	                    isWeekSelected = false;
	                }
	            }
	            return renderTable(opts, data, randId);
	        },

	        isVisible: function()
	        {
	            return this._v;
	        },

	        show: function()
	        {
	            if (!this.isVisible()) {
	                this._v = true;
	                this.draw();
	                removeClass(this.el, 'is-hidden');
	                if (this._o.bound) {
	                    addEvent(document, 'click', this._onClick);
	                    this.adjustPosition();
	                }
	                if (typeof this._o.onOpen === 'function') {
	                    this._o.onOpen.call(this);
	                }
	            }
	        },

	        hide: function()
	        {
	            var v = this._v;
	            if (v !== false) {
	                if (this._o.bound) {
	                    removeEvent(document, 'click', this._onClick);
	                }

	                if (!this._o.container) {
	                    this.el.style.position = 'static'; // reset
	                    this.el.style.left = 'auto';
	                    this.el.style.top = 'auto';
	                }
	                addClass(this.el, 'is-hidden');
	                this._v = false;
	                if (v !== undefined && typeof this._o.onClose === 'function') {
	                    this._o.onClose.call(this);
	                }
	            }
	        },

	        /**
	         * GAME OVER
	         */
	        destroy: function()
	        {
	            var opts = this._o;

	            this.hide();
	            removeEvent(this.el, 'mousedown', this._onMouseDown, true);
	            removeEvent(this.el, 'touchend', this._onMouseDown, true);
	            removeEvent(this.el, 'change', this._onChange);
	            if (opts.keyboardInput) {
	                removeEvent(document, 'keydown', this._onKeyChange);
	            }
	            if (opts.field) {
	                removeEvent(opts.field, 'change', this._onInputChange);
	                if (opts.bound) {
	                    removeEvent(opts.trigger, 'click', this._onInputClick);
	                    removeEvent(opts.trigger, 'focus', this._onInputFocus);
	                    removeEvent(opts.trigger, 'blur', this._onInputBlur);
	                }
	            }
	            if (this.el.parentNode) {
	                this.el.parentNode.removeChild(this.el);
	            }
	        }

	    };

	    return Pikaday;
	}));
	}(pikaday));

	var Pikaday = pikaday.exports;

	function moModal () {

	    var methods = {
	        open: function (option) {
	            option = $__default['default'].extend({}, $__default['default'].MoModalBox.defaults, option);

	            var elm = this;
	            var modal_id = this.attr('id');
	            var modal_css_id = modal_id + '_lightbox';

	            elm.trigger($__default['default'].MoModalBox.BEFORE_OPEN, [elm, option]);

	            //add MoModalBox class to lightbox
	            elm.addClass('moModal');

	            // show lightbox
	            elm.show();

	            var windowHeight = $__default['default'](window).height(),
	                modal_obj = $__default['default']('#' + modal_css_id + '_container'),
	                optinHeight = modal_obj.outerHeight(true);

	            // add 15px to the optin height of closIcon is set to be auto added to optin
	            if ('iconClose' in option && option.iconClose === true) {
	                optinHeight += 15;
	            }

	            if (optinHeight >= windowHeight) {
	                modal_obj.css({top: 10});
	            }
	            else {
	                var top = (windowHeight - (optinHeight)) / 2;
	                modal_obj.css({top: top});
	            }

	            $__default['default'](window).resize(function () {
	                var windowHeight = $__default['default'](window).height(),
	                    modal_obj = $__default['default']('#' + modal_css_id + '_container'),
	                    optinHeight = modal_obj.outerHeight(true);

	                if (optinHeight >= windowHeight) {
	                    modal_obj.css({top: 10});
	                }
	                else {
	                    var top = (windowHeight - (optinHeight)) / 2;
	                    modal_obj.css({top: top});
	                }
	            });


	            //to bind close event
	            if ('iconClose' in option && option.iconClose === true) {
	                var closeButton = $__default['default']('<a href="#" rel="moOptin:close" class="mo-optin-form-close-icon mo-close-modal ' + option.closeClass + '">' + option.closeText + '</a>');
	                elm.find('.mo-optin-form-wrapper').append(closeButton);
	            }

	            // determine if close by esc key is possible
	            if (option.keyClose) {
	                $__default['default'](document).on('keyup.moModal', keyEvent);
	            }

	            if (option.bodyClose) {
	                /* give close event to overlay and not in the body to come out of bubbling issue */
	                var overlay = $__default['default']('#' + modal_id + '.mo-optin-form-lightbox');

	                overlay.on('click', function (event) {
	                    if (event.target == overlay.get(0)) {
	                        $__default['default'].MoModalBox.close();
	                    }
	                });
	            }

	            // add flag to determine if a modal is currently active.
	            $__default['default'].MoModalBox.isActive = true;

	            //call callback function
	            option.onOpen.call(this);
	            elm.data('closeFun', option.onClose);

	            elm.trigger($__default['default'].MoModalBox.OPEN, [elm, option]);
	        },
	        close: function () {
	            var elm = this;

	            if (elm.hasClass('moModal')) {

	                elm.trigger($__default['default'].MoModalBox.BEFORE_CLOSE, [elm]);

	                elm.fadeOut(400, function () {
	                    elm = $__default['default'](this);

	                    if (typeof elm.data !== "undefined" && typeof elm.data('closeFun') !== "undefined" && typeof elm.data('closeFun').call !== "undefined") {
	                        //call callback function
	                        elm.data('closeFun').call(this);
	                    }

	                    //restore modal box
	                    elm.removeData('closeFun')
	                        .removeClass('moModal'); //remove class

	                    elm.trigger($__default['default'].MoModalBox.CLOSE, [elm]);

	                    //if all modal box is closed unbind all events.
	                    if ($__default['default']('.moModal').length === 0) {
	                        $__default['default']('.mo-optin-form-lightbox').hide();
	                        $__default['default'](document).off('keyup.moModal');
	                    }

	                    $__default['default'].MoModalBox.isActive = false;

	                    elm.trigger($__default['default'].MoModalBox.AFTER_CLOSE, [elm]);

	                });
	            }
	        }
	    };

	    $__default['default'].fn.MoModalBox = function (method, option) {
	        // if there exist an active modal, bail.
	        if ($__default['default'].MoModalBox.isActive) return this;

	        // this here is the element collection
	        if (methods[method]) {
	            methods[method].call(this, option);
	        } else if (typeof method === 'object' || !method) {
	            methods.open.call(this, method);
	        }

	        return this;
	    };

	    $__default['default'].MoModalBox = {};

	    //default options
	    $__default['default'].MoModalBox.defaults = {
	        overlay: true,
	        iconClose: true,
	        closeClass: '',
	        closeText: 'Close',
	        keyClose: true,
	        bodyClose: true,

	        //callback function
	        onOpen: function () {
	        },

	        onClose: function () {
	        }
	    };

	    //to close all modal box
	    $__default['default'].MoModalBox.close = function () {
	        methods.close.call($__default['default']('.moModal'));
	    };

	    // close if esc key is pressed.
	    var keyEvent = function (e) {
	        var keyCode = e.keyCode;
	        //check for esc key is pressed.
	        if (keyCode == 27) {
	            $__default['default'].MoModalBox.close();
	        }
	    };

	    // close if close icon is clicked
	    var closeClickEvent = function (e) {
	        e.preventDefault();
	        $__default['default'].MoModalBox.close();
	    };

	    // Event constants
	    $__default['default'].MoModalBox.BEFORE_OPEN = 'moOptin:before-open';
	    $__default['default'].MoModalBox.OPEN = 'moOptin:open';
	    $__default['default'].MoModalBox.BEFORE_CLOSE = 'moOptin:before-close';
	    $__default['default'].MoModalBox.CLOSE = 'moOptin:close';
	    $__default['default'].MoModalBox.AFTER_CLOSE = 'moOptin:after-close';

	    // Automatically bind links with rel="modal:close" to, well, close the modal.
	    $__default['default'](document).on('click.moOptin', 'a[rel~="moOptin:close"]', closeClickEvent);
	    $__default['default'](document).on('click.moOptin', '.mo-close-optin', closeClickEvent);
	}

	/**
	 * Inspired by https://github.com/flaviovs/jquery.exitintent
	 */

	function moExitIntent () {
	    var timer;

	    function trackLeave(ev) {
	        if (ev.clientY > 20) {
	            return;
	        }

	        if (timer) {
	            clearTimeout(timer);
	        }

	        // delay triggering exit intent if visitor cursor move out and enter the viewport.
	        timer = setTimeout(function () {
	            timer = null;
	            $__default['default'].event.trigger("moExitIntent");
	        }, 300);
	    }

	    function trackEnter() {
	        if (timer) {
	            clearTimeout(timer);
	            timer = null;
	        }
	    }

	    $__default['default'].moExitIntent = function (enable) {
	        if (enable === "enable") {
	            $__default['default'](window).on('mouseleave.moOptin', trackLeave);
	            $__default['default'](window).on('mouseenter.moOptin', trackEnter);
	        } else if (enable === "disable") {
	            trackEnter(); // Turn off any outstanding timer
	            $__default['default'](window).off("mouseleave.moOptin", trackLeave);
	            $__default['default'](window).off("mouseenter.moOptin", trackEnter);
	        }
	    };
	}

	function moScrollTrigger () {
	    var winheight, docheight, trackLength, throttlescroll;

	    function getmeasurements() {
	        winheight = $__default['default'](window).height();
	        docheight = $__default['default'](document).height();
	        trackLength = docheight - winheight;
	    }

	    function amountscrolled() {
	        var scrollTop = $__default['default'](window).scrollTop();
	        var pctScrolled = Math.floor(scrollTop / trackLength * 100);

	        $__default['default'].event.trigger('moScrollTrigger', [pctScrolled]);
	    }

	    $__default['default'](window).on('resize', function () {
	        getmeasurements();
	    });

	    $__default['default'].moScrollTrigger = function (enable) {
	        if (enable === "enable") {
	            getmeasurements();
	            $__default['default'](window).on("scroll", function () {
	                clearTimeout(throttlescroll);
	                throttlescroll = setTimeout(function () {
	                    amountscrolled();
	                }, 50);
	            });
	        }
	    };
	}

	function mcGroupsValidation() {
	    $__default['default'](document.body).on('mo_validate_optin_form_fields', function (e, mailoptin_optin, $optin_css_id, optin_js_config) {
	        var choices_obj = $__default['default']('#' + $optin_css_id).find('.mo-mailchimp-interest-choice');
	        if (choices_obj.length === 0) return;
	        if (optin_js_config.mailchimp_segment_required === false) return;
	        var checked = false;
	        choices_obj.each(function () {
	            if (this.checked) checked = true;
	        });
	        if (checked === false) {
	            mailoptin_optin.display_optin_error.call(undefined, $optin_css_id, optin_js_config.mailchimp_segment_required_error);
	            return false;
	        }
	    });
	}

	function recaptcha () {
	    window.moFormRecaptchaLoadCallback = function () {
	        $__default['default']('.mo-g-recaptcha').each(function (index, el) {
	            var $site_key = $__default['default'](el).attr('data-sitekey');
	            if ($__default['default'](el).attr('data-type') === 'v3') {
	                var $form = $__default['default'](this).parents('form.mo-optin-form');

	                $form.find('input.mo-optin-form-submit-button').on('click', function (e) {
	                    e.preventDefault();
	                    grecaptcha.ready(function () {
	                        grecaptcha.execute($site_key, {action: 'form'}).then(function (token) {
	                            $form.find('[name="g-recaptcha-response"]').remove();

	                            $form.append($__default['default']('<input>', {
	                                type: 'hidden',
	                                value: token,
	                                name: 'g-recaptcha-response'
	                            }));

	                            $form.submit();
	                        });
	                    });
	                });
	            } else {
	                grecaptcha.render(el, {
	                    'sitekey': $site_key,
	                    'theme': $__default['default'](el).attr('data-theme'),
	                    'size': $__default['default'](el).attr('data-size')
	                });
	            }
	        });
	    };
	}

	$__default['default'].MailOptin = {

	    // flag to detect if we've already loaded showads.js file to detect adblock
	    is_adblock_script_loaded: false,
	    /**
	     * Is the current screen customizer preview?
	     * @return {boolean}
	     */
	    is_customize_preview: (mailoptin_globals__default['default'].is_customize_preview === 'true'),

	    /**
	     * Track optin conversion and impression.
	     *
	     * @param {string} optin_uuid
	     */
	    track_impression: function (optin_uuid) {
	        // bail if this is customizer preview
	        if ($__default['default'].MailOptin.is_customize_preview === true || mailoptin_globals__default['default'].disable_impression_tracking === 'true') return;

	        var stat_data = {
	            optin_uuid: optin_uuid,
	            conversion_page: window.location.href,
	            referrer: document.referrer || ""
	        };

	        $__default['default'].post(mailoptin_globals__default['default'].mailoptin_ajaxurl.toString().replace('%%endpoint%%', 'track_optin_impression'), {stat_data: stat_data});
	    }
	};

	var mailoptin_optin = {

	    content_locker_storage: [],

	    mailoptin_jq_plugin: function () {
	        var self = this;
	        $__default['default'].fn.mailoptin = function (skip_display_checks) {
	            skip_display_checks = typeof skip_display_checks !== 'undefined' ? skip_display_checks : false;

	            var modal_options,
	                $optin_uuid,
	                $optin_type,
	                $optin_css_id,
	                optin_js_config,
	                test_mode;

	            $optin_uuid = this.attr('id');
	            $optin_type = this.attr('data-optin-type');
	            $optin_css_id = $optin_uuid + '_' + $optin_type;
	            optin_js_config = self.optin_js_config($optin_css_id);

	            if (typeof optin_js_config === 'undefined') return;

	            test_mode = ($__default['default'].MailOptin.is_customize_preview === true) ? true : optin_js_config.test_mode;

	            // add the close-optin event handler. modal/lightbox has its own so skip.
	            if (this.hasClass('mo-optin-form-lightbox') === false) {
	                $__default['default'](document).on('click.moOptin', 'a[rel~="moOptin:close"], .mo-close-optin', {
	                        'optin_uuid': $optin_uuid,
	                        'optin_type': $optin_type,
	                        'optin_js_config': optin_js_config,
	                        'self': self
	                    }, self.close_optin
	                );
	            }

	            // remove the close optin event if we're in customizer.
	            if ($__default['default'].MailOptin.is_customize_preview === true) {
	                $__default['default'](document).off('submit.moOptinSubmit', 'form.mo-optin-form');
	                $__default['default'](document).off('click.moOptinSubmit', '.mo-optin-form-submit-button');
	                $__default['default'](document).off('click.moOptin', 'a[rel~="moOptin:close"]');
	                $__default['default'](document).off('click.moOptin', '.mo-close-optin');
	            }

	            /** lightbox / modal */
	            if (this.hasClass('mo-optin-form-lightbox')) {
	                modal_options = {
	                    optin_uuid: $optin_uuid,
	                    bodyClose: optin_js_config.body_close,
	                    keyClose: optin_js_config.body_close,
	                    test_mode: test_mode,
	                    iconClose: optin_js_config.icon_close,
	                    onOpen: function () {
	                        self.animate_optin_display.call(this, optin_js_config.effects);
	                    },
	                    onClose: function () {
	                        self.set_cookie('exit', $optin_uuid, optin_js_config);
	                    }
	                };

	                if ($__default['default'].MailOptin.is_customize_preview === true) {
	                    modal_options.keyClose = false;
	                    modal_options.bodyClose = false;
	                    modal_options.test_mode = true;
	                }

	                // merge modal specific object with that of optin js config
	                optin_js_config = $__default['default'].extend({}, modal_options, optin_js_config);

	                self.process_optin_form_display.call(this, optin_js_config, 'lightbox', skip_display_checks);
	            }

	            /** Notification bar */
	            if (this.hasClass('mo-optin-form-bar')) {
	                // only one instance of top bar can show at a time.
	                if (self.is_flag_optin_type_active(optin_js_config, 'bar')) return;

	                self.process_optin_form_display.call(this, optin_js_config, 'bar', skip_display_checks);
	            }

	            /** Slide INs */
	            if (this.hasClass('mo-optin-form-slidein')) {
	                // only one instance of slidein type can shown at a time.
	                if (self.is_flag_optin_type_active(optin_js_config, 'slidein')) return;
	                self.process_optin_form_display.call(this, optin_js_config, 'slidein', skip_display_checks);
	            }

	            /** Sidebar */
	            if (this.hasClass('mo-optin-form-sidebar')) {
	                self.process_optin_form_display.call(this, optin_js_config, 'sidebar', skip_display_checks);
	            }

	            /** Inpost */
	            if (this.hasClass('mo-optin-form-inpost')) {
	                self.process_optin_form_display.call(this, optin_js_config, 'inpost', skip_display_checks);
	            }

	            // custom html conversion tracker
	            $__default['default'](document).on('click', '.mo-trigger-conversion', function () {
	                // set cookie for this option conversion when button is clicked.
	                self.set_cookie('success', $optin_uuid, optin_js_config);
	                self.ga_event_tracking('conversion', optin_js_config);
	            });

	            // handle CTA button click if activated
	            if (self.is_var_defined(optin_js_config, 'cta_display') && optin_js_config.cta_display === true && self.is_var_defined(optin_js_config, 'cta_action')) {
	                // if cta action is to navigate
	                $__default['default'](document).on('click', '#' + $optin_css_id + '_cta_button', function (e) {
	                    e.preventDefault();
	                    var optin_container = $__default['default'](this).parents('.moOptinForm');

	                    if (optin_js_config.cta_action === 'navigate_to_url' && self.is_var_defined(optin_js_config, 'cta_navigate_url')) {
	                        // bail if we are in customizer preview.
	                        if ($__default['default'].MailOptin.is_customize_preview === true) return;
	                        // set cookie for this option conversion when button is clicked.
	                        self.set_cookie('success', $optin_uuid, optin_js_config);
	                        self.ga_event_tracking('conversion', optin_js_config);

	                        window.location.assign(optin_js_config.cta_navigate_url);
	                    } else if (optin_js_config.cta_action === 'reveal_optin_form') {
	                        var cache = $__default['default']('#' + $optin_css_id);
	                        cache.find('.mo-optin-form-cta-button, .mo-optin-form-cta-wrapper').hide();
	                        cache.find('.mo-optin-fields-wrapper').show();
	                        cache.find('.mo-optin-form-submit-button').show();
	                        $__default['default']('#' + $optin_uuid).removeClass('mo-cta-button-flag');
	                    } else if ($__default['default'].inArray(optin_js_config.cta_action, ['close_optin', 'close_optin_reload_page']) !== -1) {
	                        $__default['default'].MoModalBox.close();
	                        mailoptin_optin._close_optin(optin_container);

	                        if (optin_js_config.cta_action === 'close_optin_reload_page') {
	                            window.location.reload();
	                        }
	                    } else {
	                        console.warn('something went wrong.');
	                    }
	                    return false;
	                });
	            }

	            if (!$__default['default'].MailOptin.is_customize_preview && self.is_adblock_rule_active(optin_js_config) === true && $__default['default'].MailOptin.is_adblock_script_loaded === false) {
	                self.load_adblock_detect_script();
	                $__default['default'].MailOptin.is_adblock_script_loaded = true;
	            }
	        };

	        $__default['default'].fn.extend({
	            animateOptin: function (animationName) {
	                var animationEnd = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';
	                this.addClass('MOanimated ' + animationName).one(animationEnd, function () {
	                    $__default['default'](this).removeClass('MOanimated ' + animationName);
	                });
	            }
	        });
	    },

	    /**
	     * Is after x seconds rule active?
	     *
	     * @param {object} optin_config
	     * @returns {boolean}
	     */
	    is_after_x_seconds_active: function (optin_config) {

	        return typeof optin_config.x_seconds_status !== 'undefined' &&
	            optin_config.x_seconds_status === true &&
	            typeof optin_config.x_seconds_value !== 'undefined';
	    },

	    /**
	     * Is after x seconds rule active?
	     *
	     * @param {object} optin_config
	     * @returns {boolean}
	     */
	    is_after_x_scroll_active: function (optin_config) {
	        return optin_config.x_scroll_status === true && optin_config.x_scroll_value !== undefined;
	    },

	    /**
	     * Is after x page views rule active?
	     *
	     * @param {object} optin_config
	     * @returns {boolean}
	     */
	    is_after_x_page_views_active: function (optin_config) {
	        return optin_config.x_page_views_status === true &&
	            optin_config.x_page_views_condition !== undefined &&
	            optin_config.x_page_views_value !== undefined;
	    },

	    /**
	     * Is exit intent rule active?
	     *
	     * @param {object} optin_config
	     * @returns {boolean}
	     */
	    is_exit_intent_active: function (optin_config) {
	        return optin_config.exit_intent_status === true;
	    },

	    load_adblock_detect_script: function () {
	        var ad = document.createElement('script');
	        // lists of terms blocked https://easylist.to/easylist/easylist.txt
	        ad.src = mailoptin_globals__default['default'].public_js + '/ad-m.js';
	        ad.async = true;

	        // Attempt to append it to the <head>, otherwise append to the document.
	        (document.getElementsByTagName('head')[0] || document.documentElement).appendChild(ad);
	    },

	    /**
	     * Is New vs Returning rule active?
	     *
	     * @param {object} optin_config
	     * @returns {boolean}
	     */
	    is_newvsreturn_rule_active: function (optin_config) {
	        // no need checking if optin_config.newvsreturn_status_settings is not empty because
	        // newvsreturn_status and newvsreturn_settings config are only exposed if the former is true
	        // and latter not empty.
	        return optin_config.newvsreturn_status === true;
	    },

	    /**
	     * Is referrer detection active?
	     *
	     * @param {object} optin_config
	     * @returns {boolean}
	     */
	    is_referrer_detection_rule_active: function (optin_config) {
	        return optin_config.referrer_detection_status === true;
	    },

	    /**
	     * Is Adblock rule active?
	     *
	     * @param {object} optin_config
	     * @returns {boolean}
	     */
	    is_adblock_rule_active: function (optin_config) {
	        // no need checking if optin_config.adblock_settings is not empty because
	        // adblock_status and adblock_settings config are only exposed if the former is true
	        // and latter not empty.
	        return optin_config.adblock_status === true;
	    },

	    /**
	     * Determine if optin should display or not.
	     *
	     * @param {object} optin_config
	     *
	     * @returns {boolean}
	     */
	    is_optin_visible: function (optin_config) {
	        if (optin_config.state_after_conversion !== 'optin_form_shown') {
	            var $optin_uuid = optin_config.optin_uuid;
	            // if global success cookie found, do not display any optin.
	            if (optin_config.global_success_cookie > 0 && Cookies.get('mo_global_success_cookie')) return false;
	            // if global interaction/exit cookie found, do not display any optin.
	            if (optin_config.global_cookie > 0 && Cookies.get('mo_global_cookie')) return false;
	            // if success cookie found for this optin, do not display it.
	            if (Cookies.get('mo_success_' + $optin_uuid)) return false;
	            // if exit cookie found for this optin, do not dispay it.
	            if (Cookies.get('mo_' + $optin_uuid)) return false;
	        }

	        return true;
	    },

	    /**
	     * Determine if optin variants should display or not.
	     *
	     * @param {object} optin_config
	     *
	     * @returns {boolean}
	     */
	    split_test_cookie_test: function (optin_config) {

	        if (optin_config.is_split_test === true) {

	            var flag = true,
	                self = mailoptin_optin,
	                optin_campaign_id = optin_config.optin_campaign_id;

	            if (optin_campaign_id in optin_config.split_test_variants) {

	                $__default['default'].each(optin_config.split_test_variants, function (index, variant_config) {

	                    if (self.is_var_defined(variant_config, 'state_after_conversion') &&
	                        variant_config.state_after_conversion !== 'optin_form_shown' &&
	                        self.is_optin_visible(variant_config) === false) {
	                        flag = false;
	                        return false; // break the loop
	                    }
	                });

	                return flag;
	            }
	        }

	        return true;
	    },

	    /**
	     * Handle display/showing of optin form.
	     *
	     * @param {object} optin_js_config for lightbox, this is modal_options.  others is optin_js_config
	     * @param {string} optin_type type of optin
	     * @param {boolean} skip_display_checks skip any display/cookie check
	     */
	    process_optin_form_display: function (optin_js_config, optin_type, skip_display_checks) {
	        var self = mailoptin_optin;
	        // we did this becos 'this' inside $(window).load will be wrong.
	        var _this = this;

	        if (self.is_adblock_rule_active(optin_js_config) === true) {
	            // we're gonna wait until page is loaded so we can detect if adblock is enabled or not
	            $__default['default'](window).on('load', function () {
	                self.rule_base_show_optin_form.call(_this, optin_js_config, optin_type, skip_display_checks);
	            });
	        } else {
	            self.rule_base_show_optin_form.call(_this, optin_js_config, optin_type, skip_display_checks);
	        }
	    },

	    /**
	     * Run through display ruleset and determine which to display
	     *
	     * @param {object} optin_config for lightbox, this is modal_options.  others is optin_js_config
	     * @param {string} optin_type type of optin
	     * @param {boolean} skip_display_checks skip any display/cookie check
	     */
	    rule_base_show_optin_form: function (optin_config, optin_type, skip_display_checks) {

	        var self = mailoptin_optin;
	        // we did this becos 'this' inside setTimeout() will be wrong.
	        var _this = this;

	        // if customizer, display immediately.
	        if ($__default['default'].MailOptin.is_customize_preview === true || optin_config.test_mode === true || skip_display_checks === true) {
	            return self.display_optin_form.call(_this, optin_config, optin_type, skip_display_checks);
	        }

	        // return if click launch status is activated for optin but the trigger isn't it.
	        if (self.is_var_defined(optin_config, 'click_launch_status') && optin_config.click_launch_status === true && skip_display_checks === false) return;

	        if (self.is_optin_visible(optin_config) === false) return;

	        if (self.split_test_cookie_test(optin_config) === false) return;

	        if (self.is_after_x_page_views_active(optin_config)) {
	            var x_page_views_condition = optin_config.x_page_views_condition;
	            var x_page_views_value = optin_config.x_page_views_value;

	            switch (x_page_views_condition) {
	                // for each condition, do the inverse return false if comparison is true.
	                case 'equals':
	                    if (self.get_page_views() !== x_page_views_value) return;
	                    break;
	                case 'more_than':
	                    if (self.get_page_views() <= x_page_views_value) return;
	                    break;
	                case 'less_than':
	                    if (self.get_page_views() >= x_page_views_value) return;
	                    break;
	                case 'at_least':
	                    if (self.get_page_views() < x_page_views_value) return;
	                    break;
	                case 'not_more_than':
	                    if (self.get_page_views() > x_page_views_value) return;
	                    break;
	            }
	        }

	        if (self.is_referrer_detection_rule_active(optin_config) === true) {
	            var remove_trailing_slash = function (url) {
	                return url.replace(/\/+$/, "");
	            };

	            var actual_referrer_url = document.referrer.toLowerCase() || false;

	            if (!actual_referrer_url) return;

	            var display_type = optin_config.referrer_detection_settings;
	            var referrers = optin_config.referrer_detection_values;

	            if (display_type === 'show_to') {
	                var is_display = false;
	                $__default['default'].each(referrers, function (index, referrer) {
	                    referrer = remove_trailing_slash(referrer).toLowerCase();
	                    // if list of referrer entered by admin in MailOptin matches actual referral.
	                    if (actual_referrer_url.indexOf(referrer) !== -1) {
	                        is_display = true;
	                        // return false to stop loop.
	                        return false;
	                    }
	                });
	            }

	            if (display_type === 'hide_from') {
	                var is_display = true;
	                $__default['default'].each(referrers, function (index, referrer) {
	                    referrer = remove_trailing_slash(referrer);
	                    // if list of referrer entered by admin in MailOptin matches actual referral.
	                    if (actual_referrer_url.indexOf(referrer) !== -1) {
	                        is_display = false;
	                        // return false to stop loop.
	                        return false;
	                    }
	                });
	            }

	            if (!is_display) return;
	        }

	        if (self.is_newvsreturn_rule_active(optin_config) === true) {
	            if (optin_config.newvsreturn_settings === "is_new" && self.visitor_is_returning()) return;
	            if (optin_config.newvsreturn_settings === "is_returning" && self.visitor_is_new()) return;
	        }

	        if (self.is_adblock_rule_active(optin_config) === true) {
	            if (optin_config.adblock_settings === "adblock_enabled" && self.isAdblockDisabled()) return;
	            if (optin_config.adblock_settings === "adblock_disabled" && self.isAdblockEnabled()) return;
	        }

	        // device detection rule
	        if (typeof window.MobileDetect !== "undefined") {
	            var mdInstance = new MobileDetect(window.navigator.userAgent);

	            if (optin_config.device_targeting_hide_mobile === true) {
	                if (mdInstance.phone()) return;
	            }

	            if (optin_config.device_targeting_hide_tablet === true) {
	                if (mdInstance.tablet()) return;
	            }

	            if (optin_config.device_targeting_hide_desktop === true) {
	                if (!mdInstance.mobile()) return;
	            }
	        }

	        // WooCommerce added to cart
	        if (self.is_var_defined(optin_config, 'wc_atc_activate_rule') && optin_config.wc_atc_activate_rule === true) {

	            $__default['default'](document.body).on('added_to_cart', function (event, fragments, cart_hash, $thisbutton) {

	                var product_id = $thisbutton.data('product_id');

	                if (self.is_var_defined(optin_config, 'wc_atc_products') &&
	                    $__default['default'].inArray(product_id, optin_config.wc_atc_products) === -1
	                ) {
	                    return false;
	                }

	                return self.display_optin_form.call(_this, optin_config, optin_type);
	            });

	            if (self.is_var_defined(mailoptin_globals__default['default'], 'wc_atc_products')) {

	                if (self.is_var_defined(optin_config, 'wc_atc_products')) {

	                    /** array intersect @see https://stackoverflow.com/a/1885569/2648410 */
	                    var intersect = optin_config.wc_atc_products.filter(function (n) {
	                        return mailoptin_globals__default['default'].wc_atc_products.indexOf(n) !== -1;
	                    });

	                    if (intersect.length === 0) return false;
	                }

	                return self.display_optin_form.call(_this, optin_config, optin_type);
	            }

	            return;
	        }

	        var wait_seconds = optin_config.x_seconds_value * 1000;
	        var optin_scroll_percent = optin_config.x_scroll_value;

	        // If all three rules are active, run the below shebang
	        if (self.is_after_x_seconds_active(optin_config) === true &&
	            self.is_after_x_scroll_active(optin_config) === true &&
	            self.is_exit_intent_active(optin_config) === true) {
	            setTimeout(function () {
	                $__default['default'].moScrollTrigger('enable');
	                $__default['default'](document).on('moScrollTrigger', function (e, pctScrolled) {
	                    if (pctScrolled >= optin_scroll_percent) {
	                        $__default['default'].moExitIntent('enable');
	                        $__default['default'](document).on("moExitIntent", function () {
	                            return self.display_optin_form.call(_this, optin_config, optin_type);
	                        });
	                    }
	                });

	            }, wait_seconds);

	            return;
	        }

	        // If only "is_after_x_scroll_active" and "is_exit_intent_active" rules are active, run the below shebang
	        if (self.is_after_x_scroll_active(optin_config) === true &&
	            self.is_exit_intent_active(optin_config) === true) {

	            $__default['default'].moScrollTrigger('enable');
	            $__default['default'](document).on('moScrollTrigger', function (e, pctScrolled) {
	                if (pctScrolled >= optin_scroll_percent) {
	                    $__default['default'].moExitIntent('enable');
	                    $__default['default'](document).on("moExitIntent", function () {
	                        return self.display_optin_form.call(_this, optin_config, optin_type);
	                    });
	                }
	            });

	            return;
	        }

	        // If only "after_x_seconds" and "after_x_scroll" rules are active, run the below shebang
	        if (self.is_after_x_seconds_active(optin_config) === true &&
	            self.is_after_x_scroll_active(optin_config) === true) {

	            setTimeout(function () {
	                $__default['default'].moScrollTrigger('enable');
	                $__default['default'](document).on('moScrollTrigger', function (e, pctScrolled) {
	                    if (_this.hasClass('si-open') === false) {
	                        if (pctScrolled >= optin_scroll_percent) {
	                            _this.addClass('si-open');
	                            return self.display_optin_form.call(_this, optin_config, optin_type);
	                        }
	                    }
	                });

	            }, wait_seconds);

	            return;
	        }

	        // If only "after_x_seconds" and "exit intent" rules are active, run the below shebang
	        if (self.is_after_x_seconds_active(optin_config) === true &&
	            self.is_exit_intent_active(optin_config) === true) {
	            setTimeout(function () {
	                $__default['default'].moExitIntent('enable');
	                $__default['default'](document).on("moExitIntent", function () {
	                    return self.display_optin_form.call(_this, optin_config, optin_type);
	                });

	            }, wait_seconds);

	            return;
	        }

	        // If only "after_x_seconds" rules is active, run the below shebang
	        if (self.is_after_x_seconds_active(optin_config) === true) {
	            setTimeout(function () {
	                return self.display_optin_form.call(_this, optin_config, optin_type);
	            }, wait_seconds);

	            return;
	        }

	        // If only "after x scroll" rules is active, run the below shebang
	        if (self.is_after_x_scroll_active(optin_config)) {
	            $__default['default'].moScrollTrigger('enable');
	            $__default['default'](document).on('moScrollTrigger', function (e, pctScrolled) {
	                if (_this.hasClass('si-open') === false) {
	                    if (pctScrolled >= optin_scroll_percent) {
	                        _this.addClass('si-open');
	                        return self.display_optin_form.call(_this, optin_config, optin_type);
	                    }
	                }
	            });

	            return;
	        }

	        // If only "exit intent" rules is active, run the below shebang
	        if (self.is_exit_intent_active(optin_config)) {
	            $__default['default'].moExitIntent('enable');
	            $__default['default'](document).on("moExitIntent", function () {
	                return self.display_optin_form.call(_this, optin_config, optin_type);
	            });

	            return;
	        }

	        return self.display_optin_form.call(_this, optin_config, optin_type);
	    },

	    /**
	     * Optin-type agnostic helper function to display optin form.
	     *
	     * @param {object} optin_config
	     * @param {string} optin_type
	     * @param {boolean} skip_display_checks
	     */
	    display_optin_form: function (optin_config, optin_type, skip_display_checks) {

	        // bail if required parameter is undefined
	        if (typeof optin_type === 'undefined' || typeof optin_type === 'undefined') return;

	        var self = mailoptin_optin;

	        // do cookie checking if we are not in customizer mode and not test mode is active.
	        if ($__default['default'].MailOptin.is_customize_preview === false && optin_config.test_mode === false && skip_display_checks !== true) {
	            if (self.is_optin_visible(optin_config) === false) return;

	            if (self.split_test_cookie_test(optin_config) === false) return;
	        }

	        if (optin_type !== undefined && optin_type === 'lightbox') {
	            // trigger optin show event.
	            $__default['default'](document.body).on($__default['default'].MoModalBox.OPEN, function (e, elm, optin_config) {
	                $__default['default'](this).trigger('moOptin:show', [optin_config.optin_uuid, optin_config]);
	            });

	            this.MoModalBox(optin_config);
	            // stop further execution
	            return;
	        }

	        self.animate_optin_display.call(this, optin_config.effects);
	        self.flag_optin_type_displayed(optin_config, optin_type);

	        if (optin_type === 'bar' && optin_config.bar_position === 'top') {

	            var originalMargin = parseFloat($__default['default'](document.body).css('margin-top')),
	                optin_uuid = optin_config.optin_uuid;

	            $__default['default'](window).on('resize.MoBarTop', function () {

	                setTimeout(function () {

	                    var cache = $__default['default']('#' + optin_uuid + '_bar'),
	                        cache2 = $__default['default']("#wpadminbar"),
	                        mHeight = cache.outerHeight();

	                    if ($__default['default'](window).width() <= 600 && cache2.length > 0) {
	                        if ($__default['default']('#' + optin_uuid + '.mo-optin-form-bar-sticky').length > 0) {
	                            mHeight -= cache2.outerHeight();
	                        } else {
	                            mHeight += cache2.outerHeight();
	                        }
	                    }

	                    mHeight = $__default['default'].MailOptin.activeBarHeight = originalMargin + mHeight;

	                    $__default['default'](document.body).css('margin-top', originalMargin + mHeight + 'px');

	                }, 500);
	            });

	            // init
	            $__default['default'](window).resize();
	        }

	        this.show();
	        $__default['default'](this).trigger('moOptin:show', [optin_config.optin_uuid, optin_config, optin_type]);
	    },

	    /**
	     * Set flag when an optin-type is displayed to prevent multiple optin-type instance showing.
	     *
	     * @param {object} optin_config
	     * @param {string} optin_type
	     */
	    flag_optin_type_displayed: function (optin_config, optin_type) {
	        if (optin_type === 'bar') {
	            var bar_position = optin_config.bar_position;
	            $__default['default'].MailOptin['isActiveMOBar_' + bar_position] = true;
	        }

	        if (optin_type === 'slidein') {
	            var slidein_position = optin_config.slidein_position;
	            $__default['default'].MailOptin['isActiveMOSlidein_' + slidein_position] = true;
	        }
	    },

	    /**
	     * Set flag when an optin-type is closed.
	     *
	     * @param {object} optin_config
	     * @param {string} optin_type
	     */
	    flag_optin_type_close: function (optin_config, optin_type) {
	        if (optin_type === 'bar') {
	            var bar_position = optin_config.bar_position;
	            $__default['default'].MailOptin['isActiveMOBar_' + bar_position] = false;
	        }

	        if (optin_type === 'slidein') {
	            var slidein_position = optin_config.slidein_position;
	            $__default['default'].MailOptin['isActiveMOSlidein_' + slidein_position] = false;
	        }
	    },

	    is_flag_optin_type_active: function (optin_config, optin_type) {
	        if (optin_type === 'bar') {
	            var bar_position = optin_config.bar_position;
	            return $__default['default'].MailOptin['isActiveMOBar_' + bar_position] === true;
	        }

	        if (optin_type === 'slidein') {
	            var slidein_position = optin_config.slidein_position;
	            return $__default['default'].MailOptin['isActiveMOSlidein_' + slidein_position] === true;
	        }
	    },

	    /**
	     * Closes any displayed optin. well doesn't for modals as they have theirs.
	     */
	    close_optin: function (e) {
	        e.preventDefault();

	        var optin_container = $__default['default'](this).parents('.moOptinForm');
	        var optin_uuid = optin_container.attr('id');
	        var optin_type = optin_container.attr('data-optin-type');
	        var optin_config = mailoptin_optin.optin_js_config(optin_uuid);

	        mailoptin_optin._close_optin(optin_container);

	        // cleanup for on-scroll optin to prevent from triggering all the time
	        optin_container.removeClass('si-open');

	        mailoptin_optin.set_cookie('exit', optin_uuid, optin_config);
	        mailoptin_optin.flag_optin_type_close(optin_config, optin_type);
	    },

	    /**
	     * Actual func to close non-modal optin forms.
	     * @param optin_container
	     * @private
	     */
	    _close_optin: function (optin_container) {
	        optin_container.fadeOut(400, function () {
	            $__default['default'](this).trigger('moOptin:close', [this]);

	            var optin_uuid = optin_container.attr('id');
	            var optin_config = mailoptin_optin.optin_js_config(optin_uuid);

	            if (optin_config.optin_type === 'bar' && optin_config.bar_position === 'top') {
	                var mt = parseFloat($__default['default'](document.body).css('margin-top'));
	                $__default['default'](document.body).css('margin-top', mt - $__default['default'].MailOptin.activeBarHeight + 'px');
	                delete $__default['default'].MailOptin.activeBarHeight;
	                $__default['default'](window).off('resize.MoBarTop');
	            }
	        });
	    },

	    /**
	     * Track number of page views.
	     */
	    track_page_views: function () {

	        if (mailoptin_globals__default['default'].is_new_returning_visitors_cookies === 'true') {
	            var prev_count = Cookies.get('mo_page_views_counter');
	            var count = (prev_count === undefined) ? 0 : prev_count;

	            // cookie expiration is missing thus making it a session cookie.
	            Cookies.set('mo_page_views_counter', ++count);
	        }
	    },

	    set_visitor_cookies: function () {
	        // Set two cookies: persistent visitor and session visitor.
	        // If persistent visitor already exists, don't set anything.
	        // This is how we determine new vs. returning visitors.
	        // basically the session cookie is to keep identifying the visitor until session expires
	        // then next visit, they become a returning visitor.
	        if (mailoptin_globals__default['default'].is_new_returning_visitors_cookies === 'true') {
	            if (!Cookies.get('mo_has_visited')) {
	                Cookies.set('mo_is_new', 'true');
	                Cookies.set('mo_has_visited', 'true', {expires: 3999});
	            }
	        }
	    },

	    isAdblockEnabled: function () {
	        return typeof mailoptin_no_adblock_detected === 'undefined';
	    },

	    isAdblockDisabled: function () {
	        return typeof mailoptin_no_adblock_detected !== 'undefined';
	    },

	    visitor_is_new: function () {
	        return Cookies.get('mo_has_visited') === 'true' && Cookies.get('mo_is_new') === 'true';
	    },

	    visitor_is_returning: function () {
	        return Cookies.get('mo_has_visited') === 'true' && !Cookies.get('mo_is_new');
	    },

	    /**
	     * Get number of page views.
	     */
	    get_page_views: function () {
	        return Number(Cookies.get('mo_page_views_counter'));
	    },

	    /**
	     * Animate optin form display
	     */
	    animate_optin_display: function (effects) {
	        if ((effects !== '') || (typeof effects !== 'undefined')) {
	            this.find('.mo-optin-form-wrapper').animateOptin(effects);
	        }
	    },

	    /**
	     * Return the configuration in Javascript of an optin.
	     * @param {string} optin_css_id could be optin campaign ID or css ID (optin id with optin type joined by "_")
	     * @returns {object}
	     */
	    optin_js_config: function (optin_css_id) {
	        return window[optin_css_id];
	    },

	    /** @todo move this into its own class/object such that all methods/functions utilized when conversion happens have access to properties and data without passing the data/properites via arguments
	     * @see https://www.phpied.com/3-ways-to-define-a-javascript-class/
	     */
	    optin_conversion: function () {

	        var optin_data, optin_container, $optin_uuid, $optin_type, $optin_css_id, optin_js_config, self;

	        self = this;

	        // if we are in customizer preview, bail.
	        if ($__default['default'].MailOptin.is_customize_preview === true) return;

	        var process_form = function (e) {
	            e.preventDefault();
	            e.stopPropagation();

	            optin_container = $__default['default'](this).parents('.moOptinForm');
	            $optin_uuid = optin_container.attr('id');
	            $optin_type = optin_container.attr('data-optin-type');
	            $optin_css_id = $optin_uuid + '_' + $optin_type;
	            optin_js_config = self.optin_js_config($optin_css_id);

	            self.hide_optin_error($optin_uuid, optin_container);

	            // data variable is only populated if validation passes.
	            if (self.validate_optin_form_fields($optin_css_id, optin_js_config, optin_container)) {

	                // loop over form fields and create and object with key to the field name and value the field value.
	                var all_form_fields_and_values = $__default['default']('form#' + $optin_css_id + '_form').serializeArray().reduce(function (obj, item) {
	                    if (item.name.indexOf('[]') !== -1) {
	                        var item_name = item.name.replace('[]', '');
	                        if (typeof obj[item_name] === 'undefined') {
	                            obj[item_name] = [];
	                            obj[item_name].push(item.value);
	                        } else {
	                            obj[item_name].push(item.value);
	                        }
	                    } else {
	                        obj[item.name] = item.value;
	                    }
	                    return obj;
	                }, {});

	                optin_data = $__default['default'].extend({}, all_form_fields_and_values, {
	                    optin_uuid: $optin_uuid,
	                    optin_campaign_id: optin_js_config.optin_campaign_id,
	                    email: $__default['default']('input#' + $optin_css_id + '_email_field', optin_container).val(),
	                    name: $__default['default']('input#' + $optin_css_id + '_name_field', optin_container).val(),
	                    _mo_timestamp: $__default['default']('input#' + $optin_css_id + '_honeypot_timestamp').val(),
	                    user_agent: navigator.userAgent,
	                    conversion_page: window.location.href,
	                    referrer: document.referrer || ""
	                });

	                self.addProcessingOverlay.call(optin_container);

	                self.subscribe_to_email_list(optin_data, optin_container, optin_js_config, $optin_type);
	            }
	        };

	        // this is important so form can be processed when say enter button is pressed to submit form.
	        $__default['default'](document).on('submit.moOptinSubmit', 'form.mo-optin-form', process_form);
	        // added this option because there was an issue where form submit event didn't work.
	        $__default['default'](document).on('click.moOptinSubmit', '.mo-optin-form-submit-button', process_form);
	    },

	    /**
	     * Add overlay over optin lighbox/modal that shows spinner and success message.
	     *
	     */
	    addProcessingOverlay: function () {
	        this.find('.mo-optin-spinner').show();
	    },

	    /**
	     * Remove overlay over optin lighbox/modal that shows spinner and success message.
	     *
	     */
	    removeProcessingOverlay: function () {
	        this.find('.mo-optin-spinner').hide();
	    },

	    /**
	     * Add close icon to processing overlay modal after successful optin.
	     */
	    addSuccessCloseIcon: function () {
	        this.find('.mo-optin-spinner').after('<a href="#" class="mo-optin-success-close" rel="moOptin:close">Ã</a>');
	    },

	    /**
	     * Remove close icon to processing overlay modal after successful optin.
	     */
	    removeSuccessCloseIcon: function () {
	        this.find('.mo-optin-success-close').remove();
	    },

	    /**
	     * overlay over optin lighbox/modal that shows spinner and success message.
	     *
	     */
	    displaySuccessContent: function () {
	        // display the success container div.
	        this.find('.mo-optin-success-msg').show();
	    },

	    /**
	     * Remove spinner.
	     */
	    removeSpinner: function () {
	        // remove spinner gif icon
	        this.find('.mo-optin-spinner').css('background-image', 'none');
	    },

	    /**
	     * Display error message from optin.
	     *
	     * @param {string} error_message
	     */
	    displayErrorMessage: function (error_message) {
	        this.find('.mo-optin-error').html(error_message).show();
	    },

	    /**
	     * Set conversion / close cookie for campaign.
	     *
	     * @param {string} type type of cookie to set. Can be exit or success cookie.
	     * @param {string} optin_uuid
	     * @param {object} optin_js_config
	     */
	    set_cookie: function (type, optin_uuid, optin_js_config) {
	        // default test mode to false.
	        var test_mode = optin_js_config.test_mode || false;

	        var cookie = optin_js_config.cookie;
	        if (type == 'success') {
	            var cookie = optin_js_config.success_cookie;
	        }

	        // if type is exit cookie, return empty. if it's success, it get appended to 'mo_' when setting cookie key.
	        type = type === 'exit' ? '' : type + '_';

	        if (!test_mode) {

	            Cookies.set('mo_' + type + optin_uuid, true, {expires: cookie});
	            // set either global exit or success cookie depending on the context in which set_cookie() is called.
	            // cookie expiration could be optin_js_config.global_cookie or optin_js_config.global_success_cookie
	            // no need to check if cookie value is not zero(0) before setting cookie because a cookie set to expires in 0 days
	            // returns undefined when tried to be gotten.
	            Cookies.set('mo_global_' + type + 'cookie', true, {expires: optin_js_config['global_' + type + 'cookie']});
	        }
	    },

	    /**
	     * POST collected optin data to appropriate connected email list.
	     *
	     * @param {mixed} optin_data
	     * @param {object} optin_container jQuery object of the parent div container
	     * @param {object} optin_js_config optin JS configuarations
	     * @param {object} $optin_type optin optin type of the optin form being looped.
	     */
	    subscribe_to_email_list: function (optin_data, optin_container, optin_js_config, $optin_type) {
	        var self = this;

	        $__default['default'].post(mailoptin_globals__default['default'].mailoptin_ajaxurl.toString().replace('%%endpoint%%', 'subscribe_to_email_list'),
	            {
	                optin_data: optin_data
	            },
	            function (response) {
	                if (!$__default['default'].isEmptyObject(response) && 'success' in response) {
	                    if (response.success === true) {

	                        $__default['default'](document.body).trigger('moOptinConversion', [optin_container, optin_js_config, optin_data]);

	                        // set cookie for this option conversion
	                        self.set_cookie('success', optin_data.optin_uuid, optin_js_config);

	                        // do not include success icon if icon_close (close icon automatically attached to lightbox) is set to true.
	                        // icon_close config is always false for none lightbox optin forms. see ./Core/src/OptinForms/AbstractOptinForm.php LN497

	                        // Because JavaScript treats 0 as loosely equal to false (i.e. 0 == false, but 0 !== false),
	                        // to check for the presence of value within array, you need to check if it's not equal to (or greater than) -1.

	                        /**@todo revisit this when new optin type is added */
	                        if ($__default['default'].inArray($optin_type, ['lightbox', 'bar', 'slidein']) !== -1 && optin_js_config.icon_close !== true) {
	                            self.addSuccessCloseIcon.call(optin_container);
	                        }

	                        self.displaySuccessContent.call(optin_container);

	                        self.removeSpinner.call(optin_container);
	                    } else {
	                        self.removeProcessingOverlay.call(optin_container);
	                        self.removeSuccessCloseIcon.call(optin_container);
	                        self.displayErrorMessage.call(optin_container, response.message);
	                    }
	                } else {
	                    self.displayErrorMessage.call(optin_container, optin_js_config.unexpected_error);
	                    self.removeProcessingOverlay.call(optin_container);
	                    self.removeSuccessCloseIcon.call(optin_container);
	                }
	            },
	            'json'
	        );
	    },

	    /**
	     * Validate name and email fields.
	     *
	     * @param {string} $optin_css_id optin CSS ID
	     * @param {object} optin_js_config optin js config
	     * @param {object} optin_container
	     * @returns {boolean}
	     */
	    validate_optin_form_fields: function ($optin_css_id, optin_js_config, optin_container) {

	        var namefield_error = optin_js_config.name_missing_error,
	            emailfield_error = optin_js_config.email_missing_error,
	            honeypot_error = optin_js_config.honeypot_error,
	            note_acceptance_error = optin_js_config.note_acceptance_error,
	            custom_field_required_error = optin_js_config.custom_field_required_error,

	            self = this,
	            name_field = $__default['default']('#' + $optin_css_id + '_name_field:visible', optin_container),
	            email_field = $__default['default']('#' + $optin_css_id + '_email_field:visible', optin_container),
	            acceptance_checkbox = $__default['default']('#' + $optin_css_id + ' .mo-acceptance-checkbox', optin_container),

	            honeypot_email_field = $__default['default']('#' + $optin_css_id + '_honeypot_email_field', optin_container).val(),
	            honeypot_website_field = $__default['default']('#' + $optin_css_id + '_honeypot_website_field', optin_container).val(),
	            response = true;

	        // Throw error if either of the honeypot fields are filled.
	        if (honeypot_email_field.length > 0 || honeypot_website_field.length > 0) {
	            self.display_optin_error.call(undefined, $optin_css_id, honeypot_error, optin_container);
	            response = false;
	        }

	        $__default['default']('#' + $optin_css_id + ' .mo-optin-form-custom-field', optin_container).each(function () {
	            var cache = $__default['default'](this),
	                field_id = $__default['default'](this).data('field-id'),
	                required_field_bucket = optin_js_config.required_custom_fields,
	                cache_value = cache.val();

	            if (cache.find('input[type=radio]').length > 0) {
	                cache_value = cache.find('input[type=radio]:checked').length === 0 ? '' : cache.find('input[type=radio]:checked').val();
	            }

	            if (cache.find('input[type=checkbox]').length > 0) {
	                cache_value = cache.find('input[type=checkbox]:checked').length === 0 ? '' : cache.find('input[type=checkbox]:checked').val();
	            }

	            if ($__default['default'].inArray(field_id, required_field_bucket) !== -1 && cache_value === "") {
	                self.display_optin_error.call(cache, $optin_css_id, custom_field_required_error, optin_container);
	                response = false;
	            }
	        });

	        // if this is an email field, validate that the email address.
	        if (email_field.length > 0) {
	            if (self.isValidEmail(email_field.val()) === false) {
	                self.display_optin_error.call(email_field, $optin_css_id, emailfield_error, optin_container);
	                response = false;
	            }
	        }

	        // if this is a name field, check if the field isn't empty.
	        if (optin_js_config.name_field_required === true && name_field.length > 0) {
	            if (name_field.val() === "") {
	                self.display_optin_error.call(name_field, $optin_css_id, namefield_error, optin_container);
	                response = false;
	            }
	        }

	        // we are doing a return here to ensure core validation has passed before hooked validations.
	        if (response === false) return response;

	        if (acceptance_checkbox.length > 0) {
	            if (acceptance_checkbox[0].checked === false) {
	                self.display_optin_error.call(undefined, $optin_css_id, note_acceptance_error, optin_container);
	                return false;
	            }
	        }

	        var added_validation = $__default['default'](document.body).triggerHandler('mo_validate_optin_form_fields', [self, $optin_css_id, optin_js_config]);

	        if (added_validation === false) response = false;

	        return response;
	    },

	    /**
	     * Output an optin error with the field highlighted red.
	     *
	     * @param {string} $optin_css_id optin CSS ID
	     * @param {object} optin_container
	     * @param {string} error
	     */
	    display_optin_error: function ($optin_css_id, error, optin_container) {
	        if (this !== undefined) {
	            this.css("-webkit-box-shadow", "inset 0px 0px 0px 2px #f45a4a");
	            this.css("-moz-box-shadow", "inset 0px 0px 0px 2px #f45a4a");
	            this.css("box-shadow", "inset 0px 0px 0px 2px #f45a4a");
	        }

	        var mo_optin_error_text = $__default['default']('div#' + $optin_css_id + ' .mo-optin-error', optin_container);
	        if (typeof error !== 'undefined' && typeof mo_optin_error_text !== 'undefined' && mo_optin_error_text.length > 0) {
	            if (typeof error == "string") {
	                mo_optin_error_text.text(error).show();
	            }
	        }
	    },

	    /**
	     * Hide optin error including removing the red border.
	     *
	     * @param {string} $optin_css_id optin CSS ID
	     * @param {object} optin_container
	     */
	    hide_optin_error: function ($optin_css_id, optin_container) {
	        var input_fields = $__default['default']('.mo-optin-field', optin_container);
	        $__default['default']('.mo-optin-error', optin_container).hide();
	        input_fields.css('-webkit-box-shadow', '');
	        input_fields.css('-moz-box-shadow', '');
	        input_fields.css('box-shadow', '');
	    },

	    /**
	     * Check if email address is valid.
	     *
	     * @param {string} email
	     * @returns {boolean}
	     */
	    isValidEmail: function (email) {
	        return (new RegExp(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i)).test(email);
	    },

	    ga_event_tracking: function (action, optin_js_config) {

	        action = action || 'impression';

	        if (mailoptin_optin.is_var_defined(optin_js_config, 'ga_active') === false) return;

	        if (typeof ga !== "function") return;

	        ga(function () {

	            var trackingId = ga.getAll()[0].get('trackingId');

	            if (mailoptin_optin.is_defined_not_empty(trackingId) === false) return;

	            ga('create', trackingId, 'auto', 'moTracker');

	            ga('moTracker.send', 'event', optin_js_config.optin_campaign_name, action, optin_js_config.optin_uuid, {
	                nonInteraction: true
	            });
	        });
	    },

	    /**
	     * Handle after conversion/success actions
	     * @param e
	     * @param optin_container
	     * @param optin_js_config
	     * @param optin_data
	     */
	    success_action_after_conversion: function (e, optin_container, optin_js_config, optin_data) {
	        var success_action = optin_js_config.success_action;
	        var redirect_url_val = optin_js_config.redirect_url_value;
	        var success_js_script = optin_js_config.success_js_script;
	        var is_success_js_script = typeof success_js_script !== 'undefined' && success_js_script !== '';
	        var lead_data = {};

	        lead_data.mo_name = lead_data.mo_email = '';

	        if (mailoptin_optin.is_defined_not_empty(optin_data.name)) {
	            lead_data.mo_name = optin_data.name;
	        }

	        if (mailoptin_optin.is_defined_not_empty(optin_data.email)) {
	            lead_data.mo_email = optin_data.email;
	        }

	        // track GA
	        mailoptin_optin.ga_event_tracking('conversion', optin_js_config);

	        mailoptin_optin.content_locker_removal(optin_js_config);

	        // if we have a JS success script, trigger it.
	        if (is_success_js_script === true) {
	            if (success_js_script.indexOf('<script') === -1) {
	                success_js_script = '<script type="text/javascript">' + success_js_script + '</script>';
	            }

	            success_js_script = success_js_script.replace(/\[EMAIL\]/gi, lead_data.mo_email).replace(/\[NAME\]/gi, lead_data.mo_name);

	            $__default['default'](optin_container).append(success_js_script);
	        }

	        if (typeof success_action !== 'undefined' && $__default['default'].inArray(success_action, ['close_optin', 'redirect_url', 'close_optin_reload_page']) !== -1) {

	            setTimeout(function () {
	                $__default['default'].MoModalBox.close();
	                mailoptin_optin._close_optin(optin_container);

	                if (success_action === 'close_optin_reload_page') {
	                    return window.location.reload();
	                }

	                if (success_action === 'redirect_url' && typeof redirect_url_val !== 'undefined' && redirect_url_val !== '') {
	                    if (typeof optin_js_config.pass_lead_data !== 'undefined' && true === optin_js_config.pass_lead_data) {
	                        redirect_url_val = mailoptin_optin.add_query_args(redirect_url_val, lead_data);
	                    }

	                    window.location.assign(redirect_url_val);
	                }

	            }, 1000);
	        }
	    },

	    /**
	     * All event subscription / listener should go here.
	     */
	    eventSubscription: function () {
	        // track impression for optin form other than modals
	        $__default['default'](document.body).on('moOptin:show', function (e, optin_uuid, optin_js_config) {

	            mailoptin_optin.content_locker_init(optin_js_config);

	            $__default['default'].MailOptin.track_impression(optin_uuid);
	            // track GA
	            mailoptin_optin.ga_event_tracking('impression', optin_js_config);
	        });

	        // success actions
	        $__default['default'](document.body).on('moOptinConversion', this.success_action_after_conversion);
	    },

	    is_content_locker_enabled: function (optin_config) {
	        return mailoptin_optin.is_var_defined(optin_config, 'content_lock_status') &&
	            true === optin_config.content_lock_status &&
	            mailoptin_optin.is_var_defined(optin_config, 'content_lock_style');
	    },

	    content_locker_init: function (optin_config) {

	        if (!mailoptin_optin.is_content_locker_enabled(optin_config)) return;

	        var nextAll = $__default['default']('#' + optin_config.optin_uuid).nextAll();

	        if ('removal' === optin_config.content_lock_style) {

	            nextAll.each(function (index, el) {
	                mailoptin_optin.content_locker_storage.push($__default['default'](el).clone(true));
	                $__default['default'](el).remove();
	            });

	        } else {
	            nextAll.each(function (index, el) {
	                $__default['default'](el).addClass('mailoptin-content-lock');
	            });
	        }
	    },

	    content_locker_removal: function (optin_config) {

	        if (!mailoptin_optin.is_content_locker_enabled(optin_config)) return;

	        var optin_container = $__default['default']('#' + optin_config.optin_uuid),
	            nextAll = optin_container.nextAll();

	        if ('removal' === optin_config.content_lock_style) {

	            mailoptin_optin.content_locker_storage.reverse();

	            $__default['default'].each(mailoptin_optin.content_locker_storage, function (index, el) {
	                optin_container.after(el);
	            });

	        } else {

	            nextAll.each(function (index, el) {
	                $__default['default'](el).removeClass('mailoptin-content-lock');
	            });
	        }
	    },

	    add_query_args: function (uri, params) {
	        var separator = uri.indexOf('?') !== -1 ? '&' : '?';
	        for (var key in params) {
	            if (params.hasOwnProperty(key)) {
	                uri += separator + key + '=' + params[key];
	                separator = '&';
	            }
	        }
	        return uri;
	    },

	    /**
	     * Initialize optin event handlers.
	     */
	    initOptinForms: function () {

	        $__default['default'](".moOptinForm").each(function (index, element) {
	            $__default['default'](element).mailoptin();
	        });

	        var clickLaunchCallback = function (optin_uuid) {

	            if (typeof optin_uuid !== 'undefined') {

	                var selector = [
	                    "#" + optin_uuid + ".mo-optin-form-lightbox",
	                    "#" + optin_uuid + ".mo-optin-form-bar",
	                    "#" + optin_uuid + ".mo-optin-form-slidein"
	                ];

	                $__default['default'](selector.join(',')).mailoptin(true);
	            }
	        };

	        // click launch trigger
	        $__default['default'](document).on('click', '.mailoptin-click-trigger', function (event) {

	            event.preventDefault();

	            var optin_uuid = $__default['default'](this).data('optin-uuid') || $__default['default'](this).attr('id');

	            clickLaunchCallback(optin_uuid);
	        });

	        // click launch trigger
	        $__default['default'](document).on('click', '[class*="mailoptin-click-trigger-"]', function (event) {

	            event.preventDefault();

	            // https://stackoverflow.com/a/17367855/2648410
	            var optin_uuid, className = this.className.match(/mailoptin-click-trigger-([a-z0-1]+)\s?/i);

	            if (null !== className) {
	                optin_uuid = className[1];
	                clickLaunchCallback(optin_uuid);
	            }
	        });
	    },

	    is_scheduled_for_display: function () {

	        if ($__default['default'].MailOptin.is_customize_preview === true) return;

	        $__default['default']('.moOptinForm').each(function () {

	            var optin_uuid = $__default['default'](this).attr('id');
	            var optin_js_config = mailoptin_optin.optin_js_config(optin_uuid);

	            var schedule_status = optin_js_config.schedule_status;
	            var schedule_start = optin_js_config.schedule_start;
	            var schedule_end = optin_js_config.schedule_end;
	            var schedule_timezone = optin_js_config.schedule_timezone;

	            // if we have a JS success script, trigger it.
	            if (mailoptin_optin.is_defined_not_empty(schedule_status) &&
	                mailoptin_optin.is_defined_not_empty(schedule_start) &&
	                mailoptin_optin.is_defined_not_empty(schedule_end) &&
	                mailoptin_optin.is_defined_not_empty(schedule_timezone)
	            ) {
	                var d = new Date(), timezone_offset, now, start, end, result;

	                if (schedule_timezone === 'visitors_local_time') {
	                    // d.getTimezoneOffset is in minutes. so 60 * 1000 converts it to milliseconds
	                    timezone_offset = d.getTimezoneOffset() * 60 * 1000;
	                } else {
	                    // convert timezone offset in seconds to milliseconds
	                    timezone_offset = schedule_timezone * 1000;
	                }

	                // getTime return time in UTC/GMT
	                now = d.getTime();
	                // we substracting time offset to convert the time to UTC/GMT
	                start = Date.parse(schedule_start + ' GMT') - timezone_offset;
	                end = Date.parse(schedule_end + ' GMT') - timezone_offset;

	                // return true of optin should display or false otherwise
	                result = (now >= start && now <= end);

	                if (result === false) {
	                    $__default['default'](this).remove();
	                } else {
	                    $__default['default'](this).mailoptin();
	                }
	            }
	        });
	    },

	    /**
	     * Check if value is defined
	     *
	     * @param {mixed} varObj
	     * @param {string|int} objKey
	     *
	     * @returns {boolean}
	     */
	    is_var_defined: function (varObj, objKey) {
	        return (typeof varObj[objKey] !== 'undefined');
	    },

	    /**
	     * Check if value is defined and not empty.
	     *
	     * @param {mixed} val
	     *
	     * @returns {boolean}
	     */
	    is_defined_not_empty: function (val) {
	        return (typeof val !== 'undefined' && val !== '');
	    },

	    init_date_picker: function () {
	        $__default['default']('.mo-optin-form-custom-field.date-field').each(function () {
	            var currentYr = (new Date()).getFullYear();
	            var range = 150;
	            var minYear = currentYr - range;
	            new Pikaday({
	                field: this,
	                minDate: new Date(minYear, 0),
	                maxDate: new Date(currentYr + range, 0),
	                yearRange: range + range,
	                toString: function (date, format) {
	                    var day = ('0' + date.getDate()).slice(-2);
	                    var month = ('0' + (date.getMonth() + 1)).slice(-2);
	                    var year = date.getFullYear();
	                    return year + '-' + month + '-' + day;
	                }
	            });
	        });
	    },

	    /**
	     * Initialize class
	     */
	    init: function () {
	        var _this = this;
	        // don't wait for dom to be loaded first. start tracking asap.
	        _this.track_page_views();
	        _this.set_visitor_cookies();
	        $__default['default'](function () {
	            _this.eventSubscription();
	            _this.mailoptin_jq_plugin();
	            _this.is_scheduled_for_display();
	            _this.initOptinForms();
	            _this.optin_conversion();
	            _this.init_date_picker();

	            $__default['default'](document.body).trigger('mo-mailoptinjs-loaded');
	        });
	    }
	};

	moModal();
	moExitIntent();
	moScrollTrigger();
	mcGroupsValidation();
	recaptcha();

	mailoptin_optin.init();

}(jQuery, undefined, mailoptin_globals));
